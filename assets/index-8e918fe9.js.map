{"version":3,"file":"index-8e918fe9.js","sources":["../../../src/components/atoms/Input/(hooks)/useConvertChangeHandlerParam.tsx","../../../src/components/atoms/Input/(hooks)/useFormatedValue.tsx","../../../src/components/atoms/Input/(hooks)/useValidationMessageDynamicHeight.tsx","../../../src/components/atoms/Input/InputWrap.tsx","../../../src/components/atoms/Input/index.tsx"],"sourcesContent":["import { useMemo } from 'react';\n\nimport type { InputType } from './useFormatedValue';\n\nconst leftOnlyNumber = (value: string) => value.replace(/[^0-9]/g, '');\n\nexport const useConvertChangeHandlerParam = <T,>(type: InputType) =>\n  useMemo(() => {\n    switch (type) {\n      case 'number':\n      case 'large-number':\n        return (value) => (value ? Number(leftOnlyNumber(value)) : undefined);\n\n      case 'phone-number':\n        return (value) => {\n          let numberString = leftOnlyNumber(value);\n          if (numberString.length > 11) {\n            numberString = numberString.slice(0, 11);\n          }\n          return value ? numberString : undefined;\n        };\n\n      case 'business-number':\n        return (value) => {\n          let numberString = leftOnlyNumber(value);\n          if (numberString.length > 10) {\n            numberString = numberString.slice(0, 10);\n          }\n          return value ? numberString : undefined;\n        };\n\n      default:\n        return (value) => value || undefined;\n    }\n  }, [type]) as (value: string) => T;\n","import { useState } from 'react';\n\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'large-number'\n  | 'phone-number'\n  | 'business-number'\n  | 'password'\n  | 'button';\n\ninterface UseFormatedValueParams<T> {\n  value: T;\n  placeholder: string;\n  type: InputType;\n}\n\nexport const useFormatedValue = <T,>({\n  type,\n  value,\n  placeholder,\n}: UseFormatedValueParams<T>) => {\n  const [isDisplayFormatedValue, setIsDisplayFormatedValue] = useState(true);\n\n  return {\n    formatedValue: (() => {\n      if (!value) {\n        if (type === 'button') {\n          return placeholder;\n        }\n        if (value !== 0) {\n          return '';\n        }\n      }\n\n      const valueString = String(value);\n\n      if (!isDisplayFormatedValue) {\n        return valueString;\n      }\n\n      switch (type) {\n        case 'number':\n          return valueString;\n\n        case 'large-number':\n          return Number(valueString).toLocaleString();\n\n        case 'phone-number':\n          if (valueString.length === 10) {\n            return valueString.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n          }\n          return valueString.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\n\n        case 'business-number':\n          return valueString.replace(/(\\d{3})(\\d{2})(\\d{5})/, '$1-$2-$3');\n\n        default:\n          return valueString;\n      }\n    })(),\n\n    setIsDisplayFormatedValue,\n  };\n};\n","import { useEffect, useRef, useState } from 'react';\n\nexport const useValidationMessageDynamicHeight = (\n  isMessageVisible: boolean,\n) => {\n  const messageRef = useRef<HTMLParagraphElement>(null);\n  const height = messageRef.current?.offsetHeight;\n\n  const [wrapHeightStyle, setWrapHeightStyle] =\n    useState<Pick<React.CSSProperties, 'height'>>();\n  useEffect(() => {\n    if (isMessageVisible) {\n      setWrapHeightStyle({\n        height,\n      });\n    } else {\n      setWrapHeightStyle(undefined);\n    }\n  }, [height, isMessageVisible]);\n\n  return {\n    messageRef,\n    wrapHeightStyle,\n  };\n};\n","import { cleanClassName } from '@utils';\n\nimport { useValidationMessageDynamicHeight } from './(hooks)/useValidationMessageDynamicHeight';\nimport styles from './InputWrap.module.scss';\n\nexport interface InputWrapProps\n  extends Pick<HTMLTagProps<'div'>, 'children' | 'className'> {\n  onClick?: React.HTMLAttributes<HTMLDivElement>['onClick'];\n  size?: 'none' | 'small' | 'medium' | 'large';\n  borderRadius?: '4' | '8';\n  width?: React.CSSProperties['width'];\n  validationMessage?: string | null;\n}\n\nexport const InputWrap = ({\n  children,\n  onClick,\n  size = 'large',\n  className,\n  borderRadius = '8',\n  width,\n  validationMessage,\n}: InputWrapProps) => {\n  const { messageRef, wrapHeightStyle } = useValidationMessageDynamicHeight(\n    !!validationMessage,\n  );\n\n  return (\n    <div\n      style={{\n        width,\n      }}\n      className={cleanClassName(`${styles['input-wrap']} ${className}`)}\n    >\n      <div\n        className={cleanClassName(\n          `${styles['input-interaction']} ${\n            styles[`border-radius-${borderRadius}`]\n          } ${validationMessage && styles.error} ${\n            size !== 'none' && styles[`size-${size}`]\n          }`,\n        )}\n        onClick={onClick}\n      >\n        {children}\n      </div>\n      <div\n        className={styles['validation-message-wrap']}\n        style={wrapHeightStyle}\n      >\n        <p ref={messageRef} className={styles['validation-message']}>\n          {validationMessage}\n        </p>\n      </div>\n    </div>\n  );\n};\n","import type { Ref } from 'react';\nimport { forwardRef } from 'react';\n\nimport { useTypographyClassName } from '@hooks';\nimport type { UseTypographyClassNameParams } from '@hooks';\nimport { cleanClassName } from '@utils';\n\nimport { useConvertChangeHandlerParam } from './(hooks)/useConvertChangeHandlerParam';\nimport { useFormatedValue } from './(hooks)/useFormatedValue';\nimport { InputWrap } from './InputWrap';\nimport styles from './index.module.scss';\n\nimport type { InputType } from './(hooks)/useFormatedValue';\n\nexport type { InputWrapProps } from './InputWrap';\n\nexport interface InputProps<T extends InputType = 'text'>\n  extends Pick<\n      HTMLTagProps<'input'>,\n      | 'placeholder'\n      | 'onFocus'\n      | 'id'\n      | 'onClick'\n      | 'onBlur'\n      | 'ref'\n      | 'name'\n      | 'className'\n    >,\n    UseTypographyClassNameParams {\n  type?: T;\n  value?: T extends 'number' | 'large-number' ? number : string;\n  disabled?: boolean | 'read-only';\n  onChange?: (value: InputProps<T>['value']) => void;\n  ref?: Ref<HTMLInputElement>;\n}\n\nconst InputMain: <T extends InputType = 'text'>(\n  props: InputProps<T>,\n) => JSX.Element | null = forwardRef(\n  (\n    {\n      type = 'text' as const,\n      placeholder = '',\n      disabled = false,\n      value,\n      onChange,\n      onClick,\n      id,\n      onFocus,\n      name,\n      className,\n      onBlur,\n      fontSize,\n      fontWeight,\n    },\n    ref,\n  ) => {\n    const { typographyClassName } = useTypographyClassName({\n      fontSize,\n      fontWeight,\n    });\n\n    const { formatedValue, setIsDisplayFormatedValue } = useFormatedValue({\n      type,\n      value,\n      placeholder,\n    });\n\n    const convertChangeHandlerParam =\n      useConvertChangeHandlerParam<typeof value>(type);\n\n    return (\n      <input\n        id={id}\n        name={name}\n        ref={ref}\n        onFocus={(e) => {\n          setIsDisplayFormatedValue(false);\n          onFocus?.(e);\n        }}\n        onBlur={(e) => {\n          setIsDisplayFormatedValue(true);\n          onBlur?.(e);\n        }}\n        type={type}\n        placeholder={placeholder}\n        onClick={onClick}\n        value={formatedValue}\n        className={cleanClassName(\n          `${styles.input} ${disabled === 'read-only' && styles['read-only']} ${\n            type === 'button' && styles.button\n          } ${value || styles.empty} ${typographyClassName} ${className}`,\n        )}\n        disabled={!!disabled}\n        onChange={({ target: { value } }) =>\n          onChange?.(convertChangeHandlerParam(value))\n        }\n      />\n    );\n  },\n);\n\nexport const Input = Object.assign(InputMain, {\n  Wrap: InputWrap,\n});\n\nexport type { InputType };\n"],"names":["leftOnlyNumber","value","useConvertChangeHandlerParam","type","useMemo","numberString","useFormatedValue","placeholder","isDisplayFormatedValue","setIsDisplayFormatedValue","useState","valueString","useValidationMessageDynamicHeight","isMessageVisible","messageRef","useRef","height","_a","wrapHeightStyle","setWrapHeightStyle","useEffect","InputWrap","children","onClick","size","className","borderRadius","width","validationMessage","jsxs","cleanClassName","styles","jsx","InputMain","forwardRef","disabled","onChange","id","onFocus","name","onBlur","fontSize","fontWeight","ref","typographyClassName","useTypographyClassName","formatedValue","convertChangeHandlerParam","e","value2","Input"],"mappings":"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"}