{"version":3,"file":"index-5b3ef2e3.js","sources":["../../../src/components/molecules/Textarea/index.tsx"],"sourcesContent":["import type { DetailedHTMLProps, TextareaHTMLAttributes } from 'react';\n\nimport { Input, Label } from '@components/atoms';\nimport type { InputWrapProps, LabelWithInputProps } from '@components/atoms';\nimport {\n  useSubscribedState,\n  useTypographyClassName,\n  useValidationMessage,\n} from '@hooks';\nimport type {\n  UseTypographyClassNameParams,\n  ValidateHandler,\n  ValidationTrigger,\n} from '@hooks';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\nimport { Tag } from '../Tag';\n\nexport interface TextareaProps\n  extends Pick<\n      DetailedHTMLProps<\n        TextareaHTMLAttributes<HTMLTextAreaElement>,\n        HTMLTextAreaElement\n      >,\n      'placeholder' | 'id'\n    >,\n    Omit<LabelWithInputProps, 'inputStyle'> {\n  onChange?: (value?: string) => void;\n  onClick?: InputWrapProps['onClick'];\n  value?: string;\n  validation?: ValidateHandler<TextareaProps['value']>;\n  disabled?: boolean | 'read-only';\n  inputStyle?: {\n    resize?: boolean;\n    height?: React.CSSProperties['height'];\n  } & Pick<InputWrapProps, 'borderRadius' | 'width'> &\n    UseTypographyClassNameParams;\n  floatingActionName?: string;\n  onFloatingActionClick?: () => void;\n  validationTrigger?: ValidationTrigger;\n  description?: InputWrapProps['description'];\n}\n\nexport const Textarea = ({\n  placeholder = '',\n  value: originalValue,\n  onChange,\n  disabled,\n  validation,\n  id,\n  label,\n  className,\n  onClick,\n  inputStyle,\n  labelStyle,\n  floatingActionName,\n  onFloatingActionClick,\n  validationTrigger,\n  description,\n}: TextareaProps) => {\n  const [textareaValue, setTextareaValue] = useSubscribedState(\n    originalValue ?? '',\n  );\n\n  const { typographyClassName } = useTypographyClassName({\n    fontSize: inputStyle?.fontSize,\n    fontWeight: inputStyle?.fontWeight,\n  });\n\n  const { validationMessage, validateOnChange, validateOnBlur } =\n    useValidationMessage({\n      key: label,\n      validateHandler: validation,\n      value: textareaValue,\n      validationTrigger,\n    });\n\n  return (\n    <Label.Container direction={labelStyle?.direction} className={className}>\n      {label ? (\n        <Label\n          htmlFor={label}\n          fontSize={labelStyle?.fontSize}\n          fontWeight={labelStyle?.fontWeight}\n        >\n          {label}\n        </Label>\n      ) : null}\n      <Input.Wrap\n        validationMessage={validationMessage}\n        size=\"none\"\n        onClick={onClick}\n        width={inputStyle?.width}\n        borderRadius={inputStyle?.borderRadius}\n        description={description}\n      >\n        {floatingActionName && (\n          <div className={styles['floating-action-container']}>\n            <Tag color=\"purple50\" onClick={onFloatingActionClick}>\n              {floatingActionName}\n            </Tag>\n          </div>\n        )}\n\n        <textarea\n          id={id}\n          name={label}\n          value={textareaValue}\n          placeholder={placeholder}\n          style={{\n            height: inputStyle?.height,\n          }}\n          onChange={({ target: { value } }) => {\n            setTextareaValue?.(value);\n            onChange?.(value);\n            validateOnChange?.(value);\n          }}\n          disabled={!!disabled}\n          className={cleanClassName(\n            `${styles['textarea-content']} ${\n              (inputStyle?.resize ?? true) && styles.resize\n            } ${typographyClassName} ${\n              disabled === 'read-only' && [styles['read-only']]\n            } ${styles['full-size']}`,\n          )}\n          onBlur={validateOnBlur}\n        />\n      </Input.Wrap>\n    </Label.Container>\n  );\n};\n"],"names":["Textarea","placeholder","originalValue","onChange","disabled","validation","id","label","className","onClick","inputStyle","labelStyle","floatingActionName","onFloatingActionClick","validationTrigger","description","textareaValue","setTextareaValue","useSubscribedState","typographyClassName","useTypographyClassName","validationMessage","validateOnChange","validateOnBlur","useValidationMessage","jsxs","Label","jsx","Input","styles","Tag","value","cleanClassName"],"mappings":"68DA4COA,EAAA,CAAA,CAAkB,YAAAC,EAAA,GACT,MAAAC,EACP,SAAAC,EACP,SAAAC,EACA,WAAAC,EACA,GAAAC,EACA,MAAAC,EACA,UAAAC,EACA,QAAAC,EACA,WAAAC,EACA,WAAAC,EACA,mBAAAC,EACA,sBAAAC,EACA,kBAAAC,EACA,YAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAA0ChB,GAAA,EACvB,EAGnB,CAAA,oBAAAiB,CAAA,EAAAC,EAAA,CAAuD,SAAAV,GAAA,YAAAA,EAAA,SAC/B,WAAAA,GAAA,YAAAA,EAAA,UACE,CAAA,EAG1B,CAAA,kBAAAW,EAAA,iBAAAC,EAAA,eAAAC,CAAA,EAAAC,EAAA,CACuB,IAAAjB,EACd,gBAAAF,EACY,MAAAW,EACV,kBAAAF,CACP,CAAA,EAGJ,OAAAW,EAAA,KAAAC,EAAA,UAAA,CAAA,UAAAf,GAAA,YAAAA,EAAA,UAAA,UAAAH,EAAA,SAAA,CAEKD,EAAAoB,EAAA,IACCD,EAAC,CAAA,QAAAnB,EACU,SAAAI,GAAA,YAAAA,EAAA,SACa,WAAAA,GAAA,YAAAA,EAAA,WACE,SAAAJ,CAEvB,CAAA,EAAA,KAEDkB,EAAA,KACJG,EAAA,KAAO,CAAN,kBAAAP,EACC,KAAA,OACK,QAAAZ,EACL,MAAAC,GAAA,YAAAA,EAAA,MACmB,aAAAA,GAAA,YAAAA,EAAA,aACO,YAAAK,EAC1B,SAAA,CAECH,GAAAe,EAAA,IAAA,MAAA,CAAA,UAAAE,EAAA,2BAAA,EAAA,SAAAF,EAAAA,IAAAG,EAAA,CAAA,MAAA,WAAA,QAAAjB,EAAA,SAAAD,CAAA,CAAA,EAAA,EAKCe,EAAA,IAGF,WAAC,CAAA,GAAArB,EACC,KAAAC,EACM,MAAAS,EACC,YAAAf,EACP,MAAA,CACO,OAAAS,GAAA,YAAAA,EAAA,MACe,EACtB,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAqB,CAAA,CAAA,IAAA,CAEEd,GAAA,MAAAA,EAAAc,GACA5B,GAAA,MAAAA,EAAA4B,GACAT,GAAA,MAAAA,EAAAS,EAAwB,EAC1B,SAAA,CAAA,CAAA3B,EACY,UAAA4B,EACD,GAAAH,EAAA,kBAAA,OAAAnB,GAAA,YAAAA,EAAA,SAAA,KAAAmB,EAAA,UAAAV,KAAAf,IAAA,aAAA,CAAAyB,EAAA,WAAA,CAAA,KAAAA,EAAA,WAAA,GAKa,EACxB,OAAAN,CACQ,CAAA,CACV,CAAA,CAAA,CACF,CAAA,CAAA,CAGN"}