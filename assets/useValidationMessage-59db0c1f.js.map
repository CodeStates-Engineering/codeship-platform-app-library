{"version":3,"file":"useValidationMessage-59db0c1f.js","sources":["../../../src/hooks/private/useTypographyClassName.tsx","../../../src/hooks/private/useConvertChangeHandlerParam.tsx","../../../src/hooks/private/useFormatedValue.tsx","../../../src/hooks/private/useValidationMessageDynamicHeight.tsx","../../../src/hooks/private/useValidationMessage.tsx"],"sourcesContent":["import { cleanClassName } from '@utils';\n\nimport styles from '../../styles/typography.module.scss';\n\ntype FontSize =\n  | 'large4x'\n  | 'large3x'\n  | 'large2x'\n  | 'large'\n  | 'medium'\n  | 'normal'\n  | 'small'\n  | 'small2x'\n  | 'small3x';\n\ntype FontWeight = 700 | 500 | 400;\n\nexport interface UseTypographyClassNameParams {\n  fontSize?: FontSize;\n  fontWeight?: FontWeight;\n}\n\nexport const useTypographyClassName = ({\n  fontSize,\n  fontWeight,\n}: UseTypographyClassNameParams) => ({\n  typographyClassName: cleanClassName(\n    `${styles[`font-size-${fontSize}`]} ${styles[`font-weight-${fontWeight}`]}`,\n  ),\n});\n","import { useMemo } from 'react';\n\nimport type { InputType } from './useFormatedValue';\n\nconst leftOnlyNumber = (value: string) => value.replace(/[^0-9]/g, '');\n\nexport const useConvertChangeHandlerParam = <T,>(type: InputType) =>\n  useMemo(() => {\n    switch (type) {\n      case 'number':\n      case 'large-number':\n        return (value) => (value ? Number(leftOnlyNumber(value)) : undefined);\n\n      case 'phone-number':\n        return (value) => {\n          let numberString = leftOnlyNumber(value);\n          if (numberString.length > 11) {\n            numberString = numberString.slice(0, 11);\n          }\n          return value ? numberString : undefined;\n        };\n\n      case 'business-number':\n        return (value) => {\n          let numberString = leftOnlyNumber(value);\n          if (numberString.length > 10) {\n            numberString = numberString.slice(0, 10);\n          }\n          return value ? numberString : undefined;\n        };\n\n      default:\n        return (value) => value || undefined;\n    }\n  }, [type]) as (value: string) => T;\n","import { useState } from 'react';\n\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'large-number'\n  | 'phone-number'\n  | 'business-number'\n  | 'password'\n  | 'button';\n\ninterface UseFormatedValueParams<T> {\n  value: T;\n  placeholder: string;\n  type: InputType;\n}\n\nexport const useFormatedValue = <T,>({\n  type,\n  value,\n  placeholder,\n}: UseFormatedValueParams<T>) => {\n  const [isDisplayFormatedValue, setIsDisplayFormatedValue] = useState(true);\n\n  return {\n    formatedValue: (() => {\n      if (!value) {\n        if (type === 'button') {\n          return placeholder;\n        }\n        if (value !== 0) {\n          return '';\n        }\n      }\n\n      const valueString = String(value);\n\n      if (!isDisplayFormatedValue) {\n        return valueString;\n      }\n\n      switch (type) {\n        case 'number':\n          return valueString;\n\n        case 'large-number':\n          return Number(valueString).toLocaleString();\n\n        case 'phone-number':\n          if (valueString.length === 10) {\n            return valueString.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n          }\n          return valueString.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\n\n        case 'business-number':\n          return valueString.replace(/(\\d{3})(\\d{2})(\\d{5})/, '$1-$2-$3');\n\n        default:\n          return valueString;\n      }\n    })(),\n\n    setIsDisplayFormatedValue,\n  };\n};\n","import { useEffect, useRef, useState } from 'react';\n\nexport const useValidationMessageDynamicHeight = (\n  isMessageVisible: boolean,\n) => {\n  const messageRef = useRef<HTMLParagraphElement>(null);\n  const height = messageRef.current?.offsetHeight;\n\n  const [wrapHeightStyle, setWrapHeightStyle] =\n    useState<Pick<React.CSSProperties, 'height'>>();\n  useEffect(() => {\n    if (isMessageVisible) {\n      setWrapHeightStyle({\n        height,\n      });\n    } else {\n      setWrapHeightStyle(undefined);\n    }\n  }, [height, isMessageVisible]);\n\n  return {\n    messageRef,\n    wrapHeightStyle,\n  };\n};\n","import { useCallback, useState, useContext, useEffect } from 'react';\n\nimport { ValidationContext } from '@contexts/ValidationContext';\n\nexport type ValidateHandler<TValue> =\n  | ((value: TValue) => string | undefined)\n  | undefined;\n\ninterface UseValidationMessageParams<TValue> {\n  key?: string;\n  value: TValue;\n  validateHandler: ValidateHandler<TValue>;\n}\n\nexport const useValidationMessage = <TValue,>({\n  key,\n  value,\n  validateHandler,\n}: UseValidationMessageParams<TValue>) => {\n  const validationContext = useContext(ValidationContext);\n\n  const [validationMessage, setValidationMessage] = useState<string>();\n\n  const validateValue = useCallback(\n    (value: TValue) => setValidationMessage(validateHandler?.(value)),\n    [validateHandler],\n  );\n\n  useEffect(() => {\n    if (validationContext && key && validateHandler) {\n      validationContext.set(key, () => {\n        const validationMessage = validateHandler(value);\n        setValidationMessage(validationMessage);\n        return validationMessage;\n      });\n\n      return () => {\n        validationContext.delete(key);\n      };\n    }\n  }, [key, validateHandler, validationContext, value]);\n\n  return {\n    validationMessage,\n    validateValue,\n  };\n};\n"],"names":["useTypographyClassName","fontSize","fontWeight","cleanClassName","styles","leftOnlyNumber","value","useConvertChangeHandlerParam","type","useMemo","numberString","useFormatedValue","placeholder","isDisplayFormatedValue","setIsDisplayFormatedValue","useState","valueString","useValidationMessageDynamicHeight","isMessageVisible","messageRef","useRef","height","_a","wrapHeightStyle","setWrapHeightStyle","useEffect","useValidationMessage","key","validateHandler","validationContext","useContext","ValidationContext","validationMessage","setValidationMessage","validateValue","useCallback","value2","validationMessage2"],"mappings":"o9CAsBOA,EAAA,CAAA,CAAgC,SAAAC,EACrC,WAAAC,CAEF,KAAA,CAAqC,oBAAAC,EACd,GAAAC,EAAA,aAAAH,GAAA,KAAAG,EAAA,eAAAF,GAAA,GACqD,CAE5E,oiBCzBA,MAAAG,EAAAC,GAAAA,EAAA,QAAA,UAAA,EAAA,EAEOC,EAAAC,GAAAC,EAAAA,QAAA,IAAA,CAEH,OAAAD,EAAA,CAAc,IAAA,SACP,IAAA,eAEH,OAAAF,GAAAA,EAAA,OAAAD,EAAAC,CAAA,CAAA,EAAA,OAA2D,IAAA,eAG3D,OAAAA,GAAA,CACE,IAAAI,EAAAL,EAAAC,CAAA,EACA,OAAAI,EAAA,OAAA,KACEA,EAAAA,EAAA,MAAA,EAAA,EAAA,GAEFJ,EAAAI,EAAA,MAA8B,EAChC,IAAA,kBAGA,OAAAJ,GAAA,CACE,IAAAI,EAAAL,EAAAC,CAAA,EACA,OAAAI,EAAA,OAAA,KACEA,EAAAA,EAAA,MAAA,EAAA,EAAA,GAEFJ,EAAAI,EAAA,MAA8B,EAChC,QAGA,OAAAJ,GAAAA,GAAA,MAA2B,CAEjC,EAAA,CAAAE,CAAA,CAAA,8ICjBK,MAAAG,EAAA,CAAA,CAA8B,KAAAH,EACnC,MAAAF,EACA,YAAAM,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,MAAA,CAAO,eAAA,IAAA,CAEH,GAAA,CAAAT,EAAA,CACE,GAAAE,IAAA,SACE,OAAAI,EAEF,GAAAN,IAAA,EACE,MAAA,GAIJ,MAAAU,EAAA,OAAAV,CAAA,EAEA,GAAA,CAAAO,EACE,OAAAG,EAGF,OAAAR,EAAA,CAAc,IAAA,SAEV,OAAAQ,EAAO,IAAA,eAGP,OAAA,OAAAA,CAAA,EAAA,iBAA0C,IAAA,eAG1C,OAAAA,EAAA,SAAA,GACEA,EAAA,QAAA,wBAAA,UAAA,EAEFA,EAAA,QAAA,wBAAA,UAAA,EAA8D,IAAA,kBAG9D,OAAAA,EAAA,QAAA,wBAAA,UAAA,EAA8D,QAG9D,OAAAA,CAAO,CACX,GAAA,EACC,0BAAAF,CAEH,CAEJ,+hBC9DO,MAAAG,EAAAC,GAAA,OAGL,MAAAC,EAAAC,SAAA,IAAA,EACAC,GAAAC,EAAAH,EAAA,UAAA,YAAAG,EAAA,aAEA,CAAAC,EAAAC,CAAA,EAAAT,EAAA,SAAA,EAEAU,OAAAA,EAAAA,UAAA,IAAA,CAEID,EADFN,EACE,CAAmB,OAAAG,CACjB,EAGF,MAHE,CAIJ,EAAA,CAAAA,EAAAH,CAAA,CAAA,EAGF,CAAO,WAAAC,EACL,gBAAAI,CACA,CAEJ,wJCVO,MAAAG,EAAA,CAAA,CAAuC,IAAAC,EAC5C,MAAArB,EACA,gBAAAsB,CAEF,IAAA,CACE,MAAAC,EAAAC,aAAAC,CAAA,EAEA,CAAAC,EAAAC,CAAA,EAAAlB,EAAA,SAAA,EAEAmB,EAAAC,EAAA,YAAsBC,GAAAH,EAAAL,GAAA,YAAAA,EAAAQ,EAAA,EAC4C,CAAAR,CAAA,CAChD,EAGlBH,OAAAA,EAAAA,UAAA,IAAA,CACE,GAAAI,GAAAF,GAAAC,EACE,OAAAC,EAAA,IAAAF,EAAA,IAAA,CACE,MAAAU,EAAAT,EAAAtB,CAAA,EACA,OAAA2B,EAAAI,CAAA,EACAA,CAAO,CAAA,EAGT,IAAA,CACER,EAAA,OAAAF,CAAA,CAA4B,CAEhC,EAAA,CAAAA,EAAAC,EAAAC,EAAAvB,CAAA,CAAA,EAGF,CAAO,kBAAA0B,EACL,cAAAE,CACA,CAEJ"}