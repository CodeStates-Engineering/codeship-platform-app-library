{"version":3,"file":"index-2ace6af6.js","sources":["../../../src/components/atoms/Label/index.tsx"],"sourcesContent":["import type { DetailedHTMLProps, LabelHTMLAttributes } from 'react';\n\nimport { useTypographyClassName } from '@hooks';\nimport type { UseTypographyClassNameParams } from '@hooks';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\n\nimport type { InputWrapProps } from '../Input';\n\nexport interface LabelProps\n  extends Pick<\n      DetailedHTMLProps<\n        LabelHTMLAttributes<HTMLLabelElement>,\n        HTMLLabelElement\n      >,\n      'children' | 'htmlFor' | 'className'\n    >,\n    UseTypographyClassNameParams {\n  space?: 'none' | 'small' | 'medium' | 'large';\n}\n\nconst LabelMain = ({\n  children,\n  htmlFor,\n  className,\n  fontSize = 'small',\n  space = 'none',\n  fontWeight = 500,\n}: LabelProps) => {\n  const { typographyClassName } = useTypographyClassName({\n    fontSize,\n    fontWeight,\n  });\n  return (\n    <label\n      htmlFor={htmlFor}\n      className={cleanClassName(\n        `${styles.label} ${\n          styles[`space-${space}`]\n        } ${typographyClassName} ${className}`,\n      )}\n    >\n      {children}\n    </label>\n  );\n};\n\nexport interface LabelContainerProps {\n  children?: React.ReactNode;\n  className?: string;\n  direction?: 'column' | 'row';\n}\n\nconst LabelContainer = ({\n  children,\n  className,\n  direction = 'column',\n}: LabelContainerProps) => (\n  <div\n    className={cleanClassName(\n      `${styles['label-container']} ${styles[direction]} ${className}`,\n    )}\n  >\n    {children}\n  </div>\n);\n\nexport interface LabelWithInputProps {\n  className?: string;\n  label?: string;\n  labelStyle?: Pick<LabelContainerProps, 'direction'> &\n    UseTypographyClassNameParams;\n  inputStyle?: Pick<InputWrapProps, 'size'>;\n  children?: React.ReactNode;\n}\n\nconst LabelWithInput = ({\n  className,\n  label,\n  labelStyle,\n  inputStyle,\n  children,\n}: LabelWithInputProps) => (\n  <LabelContainer direction={labelStyle?.direction} className={className}>\n    {label ? (\n      <LabelMain\n        fontSize={labelStyle?.fontSize}\n        fontWeight={labelStyle?.fontWeight}\n        space={\n          labelStyle?.direction === 'row' ? inputStyle?.size ?? 'large' : 'none'\n        }\n        htmlFor={label}\n      >\n        {label}\n      </LabelMain>\n    ) : null}\n    {children}\n  </LabelContainer>\n);\n\nexport const Label = Object.assign(LabelMain, {\n  Container: LabelContainer,\n  WithInput: LabelWithInput,\n});\n"],"names":["LabelMain","children","htmlFor","className","fontSize","space","fontWeight","typographyClassName","useTypographyClassName","jsx","cleanClassName","styles","LabelContainer","direction","LabelWithInput","label","labelStyle","inputStyle","jsxs","Label"],"mappings":"mtCAsBAA,EAAA,CAAA,CAAmB,SAAAC,EACjB,QAAAC,EACA,UAAAC,EACA,SAAAC,EAAA,QACW,MAAAC,EAAA,OACH,WAAAC,EAAA,GAEV,IAAA,CACE,KAAA,CAAA,oBAAAC,CAAA,EAAAC,EAAA,CAAuD,SAAAJ,EACrD,WAAAE,CACA,CAAA,EAEF,OAAAG,EAAA,IACE,QAAC,CAAA,QAAAP,EACC,UAAAQ,EACW,GAAAC,EAAA,SAAAA,EAAA,SAAAN,GAAA,KAAAE,KAAAJ,GAGkB,EAC7B,SAAAF,CAEC,CAAA,CAGP,EAQAW,EAAA,CAAA,CAAwB,SAAAX,EACtB,UAAAE,EACA,UAAAU,EAAA,QAEF,IAAAJ,EAAA,IACE,MAAC,CAAA,UAAAC,EACY,GAAAC,EAAA,iBAAA,KAAAA,EAAAE,CAAA,KAAAV,GAC4C,EACvD,SAAAF,CAEC,CACH,EAYFa,EAAA,CAAA,CAAwB,UAAAX,EACtB,MAAAY,EACA,WAAAC,EACA,WAAAC,EACA,SAAAhB,CAEF,IAAAiB,EAAAA,KAAAN,EAAA,CAAA,UAAAI,GAAA,YAAAA,EAAA,UAAA,UAAAb,EAAA,SAAA,CAEKY,EAAAN,EAAA,IACCT,EAAC,CAAA,SAAAgB,GAAA,YAAAA,EAAA,SACuB,WAAAA,GAAA,YAAAA,EAAA,WACE,OAAAA,GAAA,YAAAA,EAAA,aAAA,OAAAC,GAAA,YAAAA,EAAA,OAAA,QAAA,OAE0C,QAAAF,EAEzD,SAAAA,CAER,CAAA,EAAA,KAEDd,CACH,CAAA,CAAA,EAIEkB,EAAA,OAAA,OAAAnB,EAAA,CAAuC,UAAAY,EACjC,UAAAE,CAEb,CAAA"}