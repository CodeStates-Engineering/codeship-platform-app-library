{"version":3,"file":"index-ce54b834.js","sources":["../../../node_modules/.pnpm/react-feather@2.0.10_react@18.2.0/node_modules/react-feather/dist/icons/copy.js","../../../src/constants/INITIAL.ts","../../../src/contexts/TableContext.tsx","../../../src/components/molecules/Table/TableBody.tsx","../../../src/components/molecules/Table/TableCell.tsx","../../../src/components/molecules/Table/TableHeader.tsx","../../../src/components/molecules/Table/TableRow.tsx","../../../src/components/molecules/Table/TableTitle.tsx","../../../src/components/molecules/Table/index.tsx"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Copy = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"rect\", {\n    x: \"9\",\n    y: \"9\",\n    width: \"13\",\n    height: \"13\",\n    rx: \"2\",\n    ry: \"2\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"\n  }));\n});\nCopy.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCopy.displayName = 'Copy';\nexport default Copy;","export const INDEX = -1;\n","import type { ComponentType } from 'react';\nimport { createContext, useState, useMemo, useContext } from 'react';\n\nimport { INITIAL } from '@constants';\n\nexport interface ColunmData {\n  originalIndex: number;\n  width?: number;\n  maxWidth?: React.CSSProperties['maxWidth'];\n}\n\ntype ColunmDataListState = [\n  ColunmData[],\n  React.Dispatch<React.SetStateAction<ColunmData[]>>,\n];\n\ntype NumberState = [number, React.Dispatch<React.SetStateAction<number>>];\n\ntype BooleanState = [boolean, React.Dispatch<React.SetStateAction<boolean>>];\n\ninterface TableContextValue {\n  colunmDataListState: ColunmDataListState;\n  draggingColunmIndexState: NumberState;\n  hoveredColunmIndexState: NumberState;\n  dropTargetColunmIndexState: NumberState;\n  fixedColunmCount: number;\n  isHorizontalScrolledState: BooleanState;\n  isLoading: boolean;\n  storageKey?: string;\n}\n\nconst TableContext = createContext<TableContextValue | undefined>(undefined);\n\nexport type TableObserverProps = Partial<\n  Pick<TableContextValue, 'fixedColunmCount' | 'storageKey'>\n>;\n\nexport const tableDataObserver =\n  <T extends TableObserverProps>(TableComponent: ComponentType<T>) =>\n  // eslint-disable-next-line react/function-component-definition\n  (props: T) => {\n    const { fixedColunmCount = 0, storageKey } = props;\n\n    const colunmDataListState = useState<ColunmData[]>([]);\n    const draggingColunmIndexState = useState<number>(INITIAL.INDEX);\n    const hoveredColunmIndexState = useState<number>(INITIAL.INDEX);\n    const dropTargetColunmIndexState = useState<number>(INITIAL.INDEX);\n\n    const isHorizontalScrolledState = useState(false);\n\n    const tableContextValue = useMemo(() => {\n      const [colunmDataList] = colunmDataListState;\n\n      const isLoading = colunmDataList.some(({ width }) => !width);\n\n      return {\n        colunmDataListState,\n        draggingColunmIndexState,\n        hoveredColunmIndexState,\n        dropTargetColunmIndexState,\n        fixedColunmCount,\n        isHorizontalScrolledState,\n        isLoading,\n        storageKey,\n      };\n    }, [\n      colunmDataListState,\n      draggingColunmIndexState,\n      dropTargetColunmIndexState,\n      fixedColunmCount,\n      hoveredColunmIndexState,\n      isHorizontalScrolledState,\n      storageKey,\n    ]);\n\n    return (\n      <TableContext.Provider value={tableContextValue}>\n        <TableComponent {...props} />\n      </TableContext.Provider>\n    );\n  };\n\nexport const useTableData = () => {\n  const tableContextValue = useContext(TableContext);\n  if (!tableContextValue) {\n    throw new Error('TableContext가 선언되지 않았습니다.');\n  }\n\n  return tableContextValue;\n};\n","export interface TableBodyProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport const TableBody = ({ children, className }: TableBodyProps) => (\n  <tbody className={className}>{children}</tbody>\n);\n","import { useEffect, useRef, useState } from 'react';\nimport { Copy } from 'react-feather';\nimport nodeToString from 'react-node-to-string';\n\nimport { Button } from '@components/atoms';\nimport { INITIAL } from '@constants';\nimport { useTableData } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TableCell.module.scss';\n\nexport interface TableCellProps {\n  className?: string;\n  children?: React.ReactNode;\n  onCopy?: (value: string) => void;\n  hoverStyle?: Pick<React.CSSProperties, 'maxHeight' | 'maxWidth'>;\n}\n\nexport const TableCell = ({\n  children,\n  onCopy,\n  className,\n  hoverStyle,\n}: TableCellProps) => {\n  const {\n    colunmDataListState: [colunmDataList, setColunmDataList],\n    hoveredColunmIndexState: [hoveredColunmIndex],\n    draggingColunmIndexState: [draggingColunmIndex],\n    dropTargetColunmIndexState: [dropTargetColunmIndex],\n    isHorizontalScrolledState: [isHorizontalScrolled],\n    fixedColunmCount,\n    isLoading,\n  } = useTableData();\n\n  const ref = useRef<HTMLTableCellElement>(null);\n  const currentIndex = ref.current?.cellIndex ?? INITIAL.INDEX;\n\n  const { maxWidth } = colunmDataList[currentIndex ?? 0] ?? {};\n\n  let left = 0;\n  for (let i = 0; i < currentIndex; i += 1) {\n    left += colunmDataList[i]?.width ?? 0;\n  }\n\n  const [isHovered, setIsHovered] = useState(false);\n\n  const isFixed = currentIndex < fixedColunmCount;\n  const isDropTarget = !isFixed && dropTargetColunmIndex === currentIndex;\n  const isDragging = !isFixed && draggingColunmIndex === currentIndex;\n  const isLastFixed = currentIndex === fixedColunmCount - 1;\n  const isTitleHovered = hoveredColunmIndex === currentIndex;\n  const [isOverflow, setOverflow] = useState(true);\n\n  useEffect(() => {\n    setColunmDataList((colunmDataList) => [...colunmDataList]);\n  }, [children, setColunmDataList]);\n\n  return (\n    <td\n      ref={ref}\n      style={{\n        left,\n      }}\n      className={cleanClassName(\n        `${styles.cell} ${isFixed && styles.fixed} ${\n          isLastFixed && isHorizontalScrolled && styles.shadow\n        } ${isTitleHovered && styles.hovered} ${\n          isDropTarget &&\n          (isDragging ||\n            ((draggingColunmIndex ?? 0) > dropTargetColunmIndex\n              ? styles['drop-left']\n              : styles['drop-right']))\n        } ${\n          isDragging && (isDropTarget ? styles.restoring : styles.dragging)\n        } ${className}`,\n      )}\n    >\n      <div\n        style={{\n          maxWidth,\n        }}\n        className={`${styles['cell-content-container']} ${\n          isOverflow ? styles.overflow : styles['not-overflow']\n        }`}\n        onMouseEnter={({ currentTarget }) => {\n          if (!isLoading) {\n            const isOverflow =\n              currentTarget.scrollWidth > currentTarget.clientWidth;\n\n            if (isOverflow || onCopy) {\n              setIsHovered(true);\n            }\n\n            if (!isOverflow) {\n              setOverflow(false);\n            }\n          }\n        }}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        {isHovered ? <div className={styles.hidden}>{children}</div> : children}\n        {isHovered ? (\n          <div\n            className={cleanClassName(\n              `${styles['hovered-cell-content-wrap']} ${\n                hoverStyle && styles['has-style']\n              }`,\n            )}\n            style={hoverStyle}\n          >\n            <div className={styles['hovered-cell-content']}>{children}</div>\n            {onCopy ? (\n              <div className={styles['copy-button-wrap']}>\n                <Button\n                  size=\"small3x\"\n                  shape=\"round\"\n                  theme=\"bluish-gray700/0\"\n                  icon={<Copy size={14} />}\n                  onClick={() => {\n                    const childrenString = nodeToString(children);\n                    navigator.clipboard.writeText(childrenString);\n                    onCopy?.(childrenString);\n                  }}\n                />\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    </td>\n  );\n};\n","import { useEffect, Children } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { useTableData } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TableHeader.module.scss';\n\nexport interface TableHeaderProps {\n  className?: string;\n  children?: ReactNode;\n}\n\nexport const TableHeader = ({ children, className }: TableHeaderProps) => {\n  const {\n    colunmDataListState: [colunmDataList, setColunmDataList],\n    storageKey,\n  } = useTableData();\n  const titleCount = Children.count(children);\n\n  useEffect(() => {\n    const savedColunmIndexList: number[] | undefined =\n      (storageKey &&\n        JSON.parse(window.localStorage.getItem(storageKey) || '')) ??\n      undefined;\n\n    const initialColunmDataList = Array.from(\n      {\n        length: titleCount,\n      },\n      (_, index) => ({\n        originalIndex: savedColunmIndexList?.[index] ?? index,\n      }),\n    );\n\n    setColunmDataList(initialColunmDataList);\n  }, [setColunmDataList, storageKey, titleCount]);\n\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <thead className={cleanClassName(`${styles.header} ${className}`)}>\n      <tr>\n        {colunmDataList.map(\n          ({ originalIndex }) => childrenArray[originalIndex],\n        )}\n      </tr>\n    </thead>\n  );\n};\n","import { Children } from 'react';\n\nimport { useTableData } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TableRow.module.scss';\n\nexport interface TableRowProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport const TableRow = ({ children, className }: TableRowProps) => {\n  const {\n    colunmDataListState: [colunmDataList],\n  } = useTableData();\n\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <tr className={cleanClassName(`${styles.row} ${className}`)}>\n      {colunmDataList.map(({ originalIndex }) => childrenArray[originalIndex])}\n    </tr>\n  );\n};\n","import { debounce } from 'lodash-es';\n\nimport { useRef, useEffect } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { INITIAL } from '@constants';\nimport { useTableData } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TableTitle.module.scss';\n\nexport interface TableTitleProps {\n  className?: string;\n  children?: ReactNode;\n  maxWidth?: React.CSSProperties['maxWidth'];\n}\n\nexport const TableTitle = ({\n  children,\n  className,\n  maxWidth,\n}: TableTitleProps) => {\n  const {\n    colunmDataListState: [colunmDataList, setColunmDataList],\n    hoveredColunmIndexState: [hoveredColunmIndex, setHoveredColunmIndex],\n    draggingColunmIndexState: [draggingColunmIndex, setDraggingColunmIndex],\n    dropTargetColunmIndexState: [\n      dropTargetColunmIndex,\n      setDropTargetColunmIndex,\n    ],\n    fixedColunmCount,\n    isHorizontalScrolledState: [isHorizontalScrolled],\n  } = useTableData();\n\n  const ref = useRef<HTMLTableCellElement>(null);\n\n  useEffect(() => {\n    const { current: element } = ref;\n    if (element) {\n      const resizeEvent = debounce(() => {\n        const { offsetWidth, cellIndex } = element;\n        setColunmDataList((prevState) => {\n          const newColunmDataList = [...prevState];\n          const colunmData = newColunmDataList[cellIndex];\n\n          if (colunmData) {\n            colunmData.width = offsetWidth;\n            colunmData.maxWidth = maxWidth;\n          }\n\n          return newColunmDataList;\n        });\n      }, 33);\n\n      resizeEvent();\n\n      window.document.addEventListener('resize', resizeEvent);\n      return () => window.document.removeEventListener('resize', resizeEvent);\n    }\n  }, [setColunmDataList, maxWidth]);\n\n  const currentIndex = ref.current?.cellIndex ?? INITIAL.INDEX;\n\n  const isFixed = currentIndex < fixedColunmCount;\n\n  const handleDrop = () => {\n    if (\n      draggingColunmIndex !== INITIAL.INDEX &&\n      currentIndex !== INITIAL.INDEX\n    ) {\n      if (!isFixed) {\n        const [draggingColunmData] = colunmDataList.splice(\n          draggingColunmIndex ?? INITIAL.INDEX,\n          1,\n        );\n\n        const newColunmDataList = [\n          ...colunmDataList.slice(0, currentIndex),\n          draggingColunmData,\n          ...colunmDataList.slice(currentIndex),\n        ];\n        setColunmDataList(newColunmDataList);\n      }\n      setDraggingColunmIndex(INITIAL.INDEX);\n      setDropTargetColunmIndex(INITIAL.INDEX);\n      setTimeout(() => setHoveredColunmIndex(dropTargetColunmIndex), 33);\n    }\n  };\n\n  let left = 0;\n  for (let i = 0; i < currentIndex; i += 1) {\n    left += colunmDataList[i]?.width ?? 0;\n  }\n\n  const isDropTarget = !isFixed && dropTargetColunmIndex === currentIndex;\n  const isDragging = !isFixed && draggingColunmIndex === currentIndex;\n  const isLastFixed = currentIndex === fixedColunmCount - 1;\n  const isHovered = hoveredColunmIndex === currentIndex;\n  return (\n    <th\n      style={{\n        left,\n      }}\n      className={cleanClassName(\n        `${styles.title} ${isFixed && styles.fixed} ${\n          isLastFixed && isHorizontalScrolled && styles.shadow\n        } ${isHovered && styles.hovered} ${\n          isDropTarget &&\n          (isDragging ||\n            ((draggingColunmIndex ?? 0) > dropTargetColunmIndex\n              ? styles['drop-left']\n              : styles['drop-right']))\n        } ${isDragging && (isDropTarget ? styles.restoring : styles.dragging)} \n  \n          } ${\n            isDragging && (isDropTarget ? styles.restoring : styles.dragging)\n          } ${className}`,\n      )}\n      ref={ref}\n      draggable={!isFixed}\n      onMouseEnter={() =>\n        setHoveredColunmIndex(\n          draggingColunmIndex === INITIAL.INDEX ? currentIndex : INITIAL.INDEX,\n        )\n      }\n      onMouseLeave={() => setHoveredColunmIndex(INITIAL.INDEX)}\n      onDragOver={(e) => e.preventDefault()}\n      onDragStart={() => setDraggingColunmIndex(currentIndex)}\n      onDragEnter={() => setDropTargetColunmIndex(currentIndex)}\n      onDrop={handleDrop}\n    >\n      <div\n        className={styles['title-content']}\n        style={{\n          maxWidth,\n        }}\n      >\n        {children}\n      </div>\n    </th>\n  );\n};\n","import type { ReactNode } from 'react';\nimport { useEffect } from 'react';\n\nimport { tableDataObserver, useTableData } from '@contexts/TableContext';\nimport type { TableObserverProps } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport { TableBody } from './TableBody';\nimport { TableCell } from './TableCell';\nimport { TableHeader } from './TableHeader';\nimport { TableRow } from './TableRow';\nimport { TableTitle } from './TableTitle';\nimport styles from './index.module.scss';\n\nexport type { TableHeaderProps } from './TableHeader';\nexport type { TableTitleProps } from './TableTitle';\nexport type { TableRowProps } from './TableRow';\nexport type { TableCellProps } from './TableCell';\nexport type { TableBodyProps } from './TableBody';\n\nexport interface TableProps\n  extends Partial<Pick<TableObserverProps, 'fixedColunmCount' | 'storageKey'>> {\n  className?: string;\n  children?: ReactNode;\n}\n\nexport const Table = Object.assign(\n  tableDataObserver(({ className, children, storageKey }: TableProps) => {\n    const {\n      colunmDataListState: [colunmDataList],\n      isHorizontalScrolledState: [, setIsHorizontalScrolled],\n    } = useTableData();\n\n    useEffect(() => {\n      if (storageKey) {\n        const colunmIndexList = colunmDataList.map(\n          ({ originalIndex }) => originalIndex,\n        );\n\n        window.localStorage.setItem(\n          storageKey,\n          JSON.stringify(colunmIndexList),\n        );\n      }\n    }, [storageKey, colunmDataList]);\n\n    return (\n      <article\n        className={cleanClassName(`${styles.table} ${className}`)}\n        onScroll={(e) =>\n          setIsHorizontalScrolled(e.currentTarget.scrollLeft > 0)\n        }\n      >\n        <table>{children}</table>\n      </article>\n    );\n  }),\n  {\n    Header: TableHeader,\n    Title: TableTitle,\n    Body: TableBody,\n    Row: TableRow,\n    Cell: TableCell,\n  },\n);\n"],"names":["_extends","target","i","source","key","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","sourceKeys","Copy","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","PropTypes","Copy$1","INDEX","TableContext","createContext","tableDataObserver","TableComponent","props","fixedColunmCount","storageKey","colunmDataListState","useState","draggingColunmIndexState","INITIAL.INDEX","hoveredColunmIndexState","dropTargetColunmIndexState","isHorizontalScrolledState","tableContextValue","useMemo","colunmDataList","isLoading","width","jsx","useTableData","useContext","TableBody","children","className","TableCell","onCopy","hoverStyle","setColunmDataList","hoveredColunmIndex","draggingColunmIndex","dropTargetColunmIndex","isHorizontalScrolled","useRef","currentIndex","_a","maxWidth","left","_b","isHovered","setIsHovered","isFixed","isDropTarget","isDragging","isLastFixed","isTitleHovered","isOverflow","setOverflow","useEffect","colunmDataList2","cleanClassName","styles","jsxs","currentTarget","isOverflow2","Button","childrenString","nodeToString","TableHeader","titleCount","Children","savedColunmIndexList","initialColunmDataList","_","index","childrenArray","originalIndex","TableRow","TableTitle","setHoveredColunmIndex","setDraggingColunmIndex","setDropTargetColunmIndex","element","resizeEvent","debounce","offsetWidth","cellIndex","prevState","newColunmDataList","colunmData","handleDrop","draggingColunmData","e","Table","setIsHorizontalScrolled","colunmIndexList"],"mappings":"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","x_google_ignoreList":[0]}