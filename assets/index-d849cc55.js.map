{"version":3,"file":"index-d849cc55.js","sources":["../../../src/components/molecules/Textarea/index.tsx"],"sourcesContent":["import type { DetailedHTMLProps, TextareaHTMLAttributes } from 'react';\nimport { useMemo } from 'react';\n\nimport styles from './index.module.scss';\nimport {\n  useSubscribedState,\n  useTypography,\n  useValidation,\n} from '../../../hooks';\nimport { cleanClassName } from '../../../utils';\nimport { Input, Label } from '../../atoms';\nimport { Tag } from '../Tag';\n\nimport type { Validation, Typography } from '../../../hooks';\nimport type { InputWrapProps, LabelContainerProps } from '../../atoms';\n\nexport interface TextareaProps\n  extends Pick<\n      DetailedHTMLProps<\n        TextareaHTMLAttributes<HTMLTextAreaElement>,\n        HTMLTextAreaElement\n      >,\n      'placeholder' | 'id'\n    >,\n    Pick<InputWrapProps, 'onClick'> {\n  onChange?: (value?: string) => void;\n  value?: string;\n  validation?: Validation<TextareaProps['value']>;\n  label?: string;\n  validationSpace?: boolean;\n  className?: string;\n  disabled?: boolean | 'read-only';\n  inputStyle?: {\n    resize?: boolean;\n    height?: React.CSSProperties['height'];\n  } & Pick<InputWrapProps, 'borderRadius' | 'width'> &\n    Typography;\n  labelStyle?: Pick<LabelContainerProps, 'direction'> & Typography;\n  floatingActionName?: string;\n  onFloatingActionClick?: () => void;\n}\n\nexport const Textarea = ({\n  placeholder = '',\n  value: originalValue,\n  onChange,\n  disabled,\n  validation,\n  id,\n  label,\n  validationSpace,\n  className,\n  onClick,\n  inputStyle,\n  labelStyle,\n  floatingActionName,\n  onFloatingActionClick,\n}: TextareaProps) => {\n  const [textareaValue, setTextareaValue] = useSubscribedState(\n    originalValue ?? '',\n  );\n\n  const { fontSizeClassName, fontWeightClassName } = useTypography(\n    inputStyle?.fontSize,\n    inputStyle?.fontWeight,\n  );\n\n  const { validationMessage, checkValidation } = useValidation(\n    textareaValue,\n    validation,\n    label,\n  );\n\n  const style = useMemo(\n    () => ({\n      height: inputStyle?.height,\n    }),\n    [inputStyle?.height],\n  );\n\n  return (\n    <Input.Container\n      validationMessage={validationMessage}\n      validationSpace={validationSpace}\n      className={className}\n    >\n      <Label.Container direction={labelStyle?.direction}>\n        {label ? (\n          <Label\n            htmlFor={label}\n            fontSize={labelStyle?.fontSize}\n            fontWeight={labelStyle?.fontWeight}\n          >\n            {label}\n          </Label>\n        ) : null}\n        <Input.Wrap\n          size=\"none\"\n          onClick={onClick}\n          width={inputStyle?.width}\n          borderRadius={inputStyle?.borderRadius}\n        >\n          {floatingActionName && (\n            <div className={styles['floating-action-container']}>\n              <Tag color=\"purple50\" onClick={onFloatingActionClick}>\n                {floatingActionName}\n              </Tag>\n            </div>\n          )}\n\n          <textarea\n            id={id}\n            name={label}\n            value={textareaValue}\n            placeholder={placeholder}\n            style={style}\n            onChange={({ target: { value } }) => {\n              setTextareaValue?.(value);\n              onChange?.(value);\n              checkValidation?.(value);\n            }}\n            disabled={!!disabled}\n            className={cleanClassName(\n              `${styles['textarea-content']} ${\n                (inputStyle?.resize ?? true) && styles.resize\n              } ${styles[fontSizeClassName]} ${styles[fontWeightClassName]} ${\n                disabled === 'read-only' && [styles['read-only']]\n              } ${styles['full-size']}`,\n            )}\n          />\n        </Input.Wrap>\n      </Label.Container>\n    </Input.Container>\n  );\n};\n"],"names":["Textarea","placeholder","originalValue","onChange","disabled","validation","id","label","validationSpace","className","onClick","inputStyle","labelStyle","floatingActionName","onFloatingActionClick","textareaValue","setTextareaValue","useSubscribedState","fontSizeClassName","fontWeightClassName","useTypography","validationMessage","checkValidation","useValidation","style","useMemo","jsx","Input","jsxs","Label","styles","Tag","value","cleanClassName"],"mappings":"g/DA0COA,EAAA,CAAA,CAAkB,YAAAC,EAAA,GACT,MAAAC,EACP,SAAAC,EACP,SAAAC,EACA,WAAAC,EACA,GAAAC,EACA,MAAAC,EACA,gBAAAC,EACA,UAAAC,EACA,QAAAC,EACA,WAAAC,EACA,WAAAC,EACA,mBAAAC,EACA,sBAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAA0Cf,GAAA,EACvB,EAGnB,CAAA,kBAAAgB,EAAA,oBAAAC,CAAA,EAAAC,EAAmDT,GAAA,YAAAA,EAAA,SACrCA,GAAA,YAAAA,EAAA,UACA,EAGd,CAAA,kBAAAU,EAAA,gBAAAC,CAAA,EAAAC,EAA+CR,EAC7CV,EACAE,CACA,EAGFiB,EAAAC,EAAA,QAAc,KAAA,CACL,OAAAd,GAAA,YAAAA,EAAA,MACe,GACtB,CAAAA,GAAA,YAAAA,EAAA,MAAA,CACmB,EAGrB,OAAAe,EAAA,IACEC,EAAA,UAAO,CAAN,kBAAAN,EACC,gBAAAb,EACA,UAAAC,EACA,SAAAmB,EAAAA,KAAAC,EAAA,UAAA,CAAA,UAAAjB,GAAA,YAAAA,EAAA,UAAA,SAAA,CAGGL,EAAAmB,EAAA,IACCG,EAAC,CAAA,QAAAtB,EACU,SAAAK,GAAA,YAAAA,EAAA,SACa,WAAAA,GAAA,YAAAA,EAAA,WACE,SAAAL,CAEvB,CAAA,EAAA,KAEDqB,EAAA,KACJD,EAAA,KAAO,CAAN,KAAA,OACM,QAAAjB,EACL,MAAAC,GAAA,YAAAA,EAAA,MACmB,aAAAA,GAAA,YAAAA,EAAA,aACO,SAAA,CAEzBE,GAAAa,EAAA,IAAA,MAAA,CAAA,UAAAI,EAAA,2BAAA,EAAA,SAAAJ,EAAAA,IAAAK,EAAA,CAAA,MAAA,WAAA,QAAAjB,EAAA,SAAAD,CAAA,CAAA,EAAA,EAKCa,EAAA,IAGF,WAAC,CAAA,GAAApB,EACC,KAAAC,EACM,MAAAQ,EACC,YAAAd,EACP,MAAAuB,EACA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAQ,CAAA,CAAA,IAAA,CAEEhB,GAAA,MAAAA,EAAAgB,GACA7B,GAAA,MAAAA,EAAA6B,GACAV,GAAA,MAAAA,EAAAU,EAAuB,EACzB,SAAA,CAAA,CAAA5B,EACY,UAAA6B,EACD,GAAAH,EAAA,kBAAA,OAAAnB,GAAA,YAAAA,EAAA,SAAA,KAAAmB,EAAA,UAAAA,EAAAZ,CAAA,KAAAY,EAAAX,CAAA,KAAAf,IAAA,aAAA,CAAA0B,EAAA,WAAA,CAAA,KAAAA,EAAA,WAAA,GAKa,CACxB,CAAA,CACF,CAAA,CAAA,CACF,EAAA,CACF,CAAA,CAGN"}