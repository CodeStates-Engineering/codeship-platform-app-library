{"version":3,"file":"index-4a6ff2c2.js","sources":["../../../src/components/molecules/Selectbox/index.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { ChevronDown } from 'react-feather';\n\nimport type {\n  InputProps,\n  OptionsProps,\n  ValidOptionValue,\n  InputWrapProps,\n  LabelWithInputProps,\n} from '@components/atoms';\nimport { FocusLayer, Options, Input, Label } from '@components/atoms';\nimport type { ValidateHandler, UseTypographyClassNameParams } from '@hooks';\nimport { useSubscribedState, useValidationMessage } from '@hooks';\n\nimport styles from './index.module.scss';\n\nexport interface SelectboxProps<\n  _ValidOptionValue = ValidOptionValue,\n  _Multiple = boolean,\n> extends Pick<\n      OptionsProps<_ValidOptionValue, _Multiple>,\n      'options' | 'float' | 'onChange' | 'value' | 'multiple' | 'optionStyle'\n    >,\n    Pick<InputProps<'button'>, 'disabled' | 'placeholder' | 'id' | 'ref'>,\n    Pick<InputWrapProps, 'onClick' | 'readOnly'>,\n    Omit<LabelWithInputProps, 'children'> {\n  validation?: ValidateHandler<SelectboxProps<_ValidOptionValue>['value']>;\n  inputStyle?: Pick<InputWrapProps, 'borderRadius' | 'size' | 'width'> &\n    UseTypographyClassNameParams;\n  description?: InputWrapProps['description'];\n}\n\nexport const Selectbox = <\n  _ValidOptionValue extends ValidOptionValue = ValidOptionValue,\n  _Multiple extends boolean = false,\n>({\n  value,\n  options,\n  onChange,\n  float,\n  disabled,\n  placeholder,\n  id,\n  ref,\n  onClick,\n  label,\n  validation,\n  className,\n  inputStyle,\n  labelStyle,\n  multiple,\n  optionStyle,\n  description,\n  readOnly,\n}: SelectboxProps<_ValidOptionValue, _Multiple>) => {\n  const [opened, setOpened] = useState(false);\n\n  const [selectedValue, setSelectedValue] = useSubscribedState(value);\n\n  const selectedOption = options?.find(({ value }) => value === selectedValue);\n\n  const { validationMessage, validateOnChange } = useValidationMessage({\n    key: label,\n    validateHandler: validation,\n    value: selectedValue,\n    validationTrigger: 'onChange',\n  });\n\n  return (\n    <Label.WithInput\n      label={label}\n      inputStyle={inputStyle}\n      labelStyle={labelStyle}\n      className={className}\n    >\n      <FocusLayer\n        onBlur={() => setOpened(false)}\n        focused={opened}\n        bodyScroll\n        className={styles['layer-width']}\n      >\n        <Input.Wrap\n          validationMessage={validationMessage}\n          size={inputStyle?.size}\n          borderRadius={inputStyle?.borderRadius}\n          width={inputStyle?.width}\n          onClick={(e) => {\n            setOpened(!opened);\n            onClick?.(e);\n          }}\n          description={description}\n          className={styles['align-end']}\n          readOnly={readOnly}\n        >\n          <Input\n            id={id}\n            name={label}\n            type=\"button\"\n            ref={ref}\n            value={selectedOption?.label}\n            disabled={disabled || readOnly}\n            placeholder={placeholder}\n            fontSize={inputStyle?.fontSize}\n            fontWeight={inputStyle?.fontWeight}\n            readOnly={readOnly}\n          />\n          <ChevronDown />\n        </Input.Wrap>\n        <Options\n          opened={opened}\n          options={options}\n          multiple={multiple}\n          value={selectedValue}\n          float={float}\n          optionStyle={optionStyle}\n          onChange={(value) => {\n            setSelectedValue?.(value);\n            validateOnChange?.(value);\n            onChange?.(value);\n            setOpened(false);\n          }}\n        />\n      </FocusLayer>\n    </Label.WithInput>\n  );\n};\n"],"names":["Selectbox","value","options","onChange","float","disabled","placeholder","id","ref","onClick","label","validation","className","inputStyle","labelStyle","multiple","optionStyle","description","readOnly","opened","setOpened","useState","selectedValue","setSelectedValue","useSubscribedState","selectedOption","value2","validationMessage","validateOnChange","useValidationMessage","jsx","Label","jsxs","FocusLayer","styles","Input","e","ChevronDown","Options"],"mappings":"gkBAgCOA,EAAA,CAAA,CAGL,MAAAC,EACA,QAAAC,EACA,SAAAC,EACA,MAAAC,EACA,SAAAC,EACA,YAAAC,EACA,GAAAC,EACA,IAAAC,EACA,QAAAC,EACA,MAAAC,EACA,WAAAC,EACA,UAAAC,EACA,WAAAC,EACA,WAAAC,EACA,SAAAC,EACA,YAAAC,EACA,YAAAC,EACA,SAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,CAAAC,EAAAC,CAAA,EAAAC,EAAAvB,CAAA,EAEAwB,EAAAvB,GAAA,YAAAA,EAAA,KAAA,CAAA,CAAA,MAAAwB,CAAA,IAAAA,IAAAJ,GAEA,CAAA,kBAAAK,EAAA,iBAAAC,CAAA,EAAAC,EAAA,CAAqE,IAAAnB,EAC9D,gBAAAC,EACY,MAAAW,EACV,kBAAA,UACY,CAAA,EAGrB,OAAAQ,EAAA,IACEC,EAAA,UAAO,CAAN,MAAArB,EACC,WAAAG,EACA,WAAAC,EACA,UAAAF,EACA,SAAAoB,EAAA,KAEAC,EAAC,CAAA,OAAA,IAAAb,EAAA,EAAA,EAC8B,QAAAD,EACpB,WAAA,GACC,UAAAe,EAAA,aAAA,EACqB,SAAA,CAE/BF,EAAA,KAAAG,EAAA,KAAO,CAAN,kBAAAR,EACC,KAAAd,GAAA,YAAAA,EAAA,KACkB,aAAAA,GAAA,YAAAA,EAAA,aACQ,MAAAA,GAAA,YAAAA,EAAA,MACP,QAAAuB,GAAA,CAEjBhB,EAAA,CAAAD,CAAA,EACAV,GAAA,MAAAA,EAAA2B,EAAW,EACb,YAAAnB,EACA,UAAAiB,EAAA,WAAA,EAC6B,SAAAhB,EAC7B,SAAA,CAEAY,EAAA,IAAAK,EAAC,CAAA,GAAA5B,EACC,KAAAG,EACM,KAAA,SACD,IAAAF,EACL,MAAAiB,GAAA,YAAAA,EAAA,MACuB,SAAApB,GAAAa,EACD,YAAAZ,EACtB,SAAAO,GAAA,YAAAA,EAAA,SACsB,WAAAA,GAAA,YAAAA,EAAA,WACE,SAAAK,CACxB,CAAA,EACFY,EAAA,IAAAO,EAAA,EAAA,CACa,CAAA,CAAA,EACfP,EAAA,IACAQ,EAAC,CAAA,OAAAnB,EACC,QAAAjB,EACA,SAAAa,EACA,MAAAO,EACO,MAAAlB,EACP,YAAAY,EACA,SAAAU,GAAA,CAEEH,GAAA,MAAAA,EAAAG,GACAE,GAAA,MAAAA,EAAAF,GACAvB,GAAA,MAAAA,EAAAuB,GACAN,EAAA,EAAA,CAAe,CACjB,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAGN"}