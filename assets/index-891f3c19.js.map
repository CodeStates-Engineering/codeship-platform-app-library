{"version":3,"file":"index-891f3c19.js","sources":["../../../src/components/atoms/Input/InputWrap.tsx","../../../src/components/atoms/Input/index.tsx"],"sourcesContent":["import { useValidationMessageDynamicHeight } from '@hooks';\nimport { cleanClassName } from '@utils';\n\nimport styles from './InputWrap.module.scss';\n\nexport interface InputWrapProps\n  extends Pick<\n    React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >,\n    'children' | 'className'\n  > {\n  onClick?: React.HTMLAttributes<HTMLDivElement>['onClick'];\n  size?: 'none' | 'small' | 'medium' | 'large';\n  borderRadius?: '4' | '8';\n  width?: React.CSSProperties['width'];\n  validationMessage?: string | null;\n  description?: string | null;\n}\n\nexport const InputWrap = ({\n  children,\n  onClick,\n  size = 'large',\n  className,\n  borderRadius = '8',\n  width,\n  validationMessage,\n  description,\n}: InputWrapProps) => {\n  const { messageRef, wrapHeightStyle } = useValidationMessageDynamicHeight(\n    !!validationMessage || !!description,\n  );\n\n  return (\n    <div\n      style={{\n        width,\n      }}\n      className={cleanClassName(`${styles['input-wrap']} ${className}`)}\n    >\n      <div\n        className={cleanClassName(\n          `${styles['input-interaction']} ${\n            styles[`border-radius-${borderRadius}`]\n          } ${validationMessage && styles.error} ${\n            size !== 'none' && styles[`size-${size}`]\n          }`,\n        )}\n        onClick={onClick}\n      >\n        {children}\n      </div>\n      {(description || validationMessage) && (\n        <div\n          className={`${styles['description-wrap']} ${\n            validationMessage && styles['validation-message-wrap']\n          }`}\n          style={wrapHeightStyle}\n        >\n          <p\n            ref={messageRef}\n            className={`${styles.description} ${\n              validationMessage && styles['validation-message']\n            }`}\n          >\n            {validationMessage || description}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n","import type { Ref } from 'react';\nimport { forwardRef } from 'react';\n\nimport {\n  useTypographyClassName,\n  useFormatedValue,\n  useConvertChangeHandlerParam,\n} from '@hooks';\nimport type { UseTypographyClassNameParams, InputType } from '@hooks';\nimport { cleanClassName } from '@utils';\n\nimport { InputWrap } from './InputWrap';\nimport styles from './index.module.scss';\n\nexport type { InputWrapProps } from './InputWrap';\n\nexport interface InputProps<T extends InputType = 'text'>\n  extends Pick<\n      React.DetailedHTMLProps<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        HTMLInputElement\n      >,\n      | 'placeholder'\n      | 'onFocus'\n      | 'id'\n      | 'onClick'\n      | 'onBlur'\n      | 'ref'\n      | 'name'\n      | 'className'\n    >,\n    UseTypographyClassNameParams {\n  type?: T;\n  value?: T extends 'number' | 'large-number' ? number : string;\n  disabled?: boolean | 'read-only';\n  onChange?: (value: InputProps<T>['value']) => void;\n  ref?: Ref<HTMLInputElement>;\n}\n\nconst InputMain: <T extends InputType = 'text'>(\n  props: InputProps<T>,\n) => JSX.Element | null = forwardRef(\n  (\n    {\n      type = 'text' as const,\n      placeholder = '',\n      disabled = false,\n      value,\n      onChange,\n      onClick,\n      id,\n      onFocus,\n      name,\n      className,\n      onBlur,\n      fontSize,\n      fontWeight,\n    },\n    ref,\n  ) => {\n    const { typographyClassName } = useTypographyClassName({\n      fontSize,\n      fontWeight,\n    });\n\n    const { formatedValue, setIsDisplayFormatedValue } = useFormatedValue({\n      type,\n      value,\n      placeholder,\n    });\n\n    const convertChangeHandlerParam =\n      useConvertChangeHandlerParam<typeof value>(type);\n\n    return (\n      <input\n        id={id}\n        name={name}\n        ref={ref}\n        onFocus={(e) => {\n          setIsDisplayFormatedValue(false);\n          onFocus?.(e);\n        }}\n        onBlur={(e) => {\n          setIsDisplayFormatedValue(true);\n          onBlur?.(e);\n        }}\n        type={type}\n        placeholder={placeholder}\n        onClick={onClick}\n        value={formatedValue}\n        className={cleanClassName(\n          `${styles.input} ${disabled === 'read-only' && styles['read-only']} ${\n            type === 'button' && styles.button\n          } ${value || styles.empty} ${typographyClassName} ${className}`,\n        )}\n        disabled={!!disabled}\n        onChange={({ target: { value } }) =>\n          onChange?.(convertChangeHandlerParam(value))\n        }\n      />\n    );\n  },\n);\n\nexport const Input = Object.assign(InputMain, {\n  Wrap: InputWrap,\n});\n\nexport type { InputType };\n"],"names":["InputWrap","children","onClick","size","className","borderRadius","width","validationMessage","description","messageRef","wrapHeightStyle","useValidationMessageDynamicHeight","jsxs","cleanClassName","styles","jsx","InputMain","forwardRef","type","placeholder","disabled","value","onChange","id","onFocus","name","onBlur","fontSize","fontWeight","ref","typographyClassName","useTypographyClassName","formatedValue","setIsDisplayFormatedValue","useFormatedValue","convertChangeHandlerParam","useConvertChangeHandlerParam","e","value2","Input"],"mappings":"8iDAqBOA,EAAA,CAAA,CAAmB,SAAAC,EACxB,QAAAC,EACA,KAAAC,EAAA,QACO,UAAAC,EACP,aAAAC,EAAA,IACe,MAAAC,EACf,kBAAAC,EACA,YAAAC,CAEF,IAAA,CACE,KAAA,CAAA,WAAAC,EAAA,gBAAAC,CAAA,EAAAC,EAAwC,CAAA,CAAAJ,GAAA,CAAA,CAAAC,CACb,EAG3B,OAAAI,EAAA,KACE,MAAC,CAAA,MAAA,CACQ,MAAAN,CACL,EACF,UAAAO,EAAA,GAAAC,EAAA,YAAA,KAAAV,GAAA,EACgE,SAAA,CAEhEW,EAAA,IAAA,MAAC,CAAA,UAAAF,EACY,GAAAC,EAAA,mBAAA,KAAAA,EAAA,iBAAAT,GAAA,KAAAE,GAAAO,EAAA,SAAAX,IAAA,QAAAW,EAAA,QAAAX,GAAA,GAIiC,EAE5C,QAAAD,EACA,SAAAD,CAEC,CAAA,GACHO,GAAAD,IAAAQ,EAAA,IAEE,MAAC,CAAA,UAAA,GAAAD,EAAA,kBAAA,KAAAP,GAAAO,EAAA,yBAAA,IAEwD,MAAAJ,EAEhD,SAAAK,EAAA,IAEP,IAAC,CAAA,IAAAN,EACM,UAAA,GAAAK,EAAA,eAAAP,GAAAO,EAAA,oBAAA,IAE6C,SAAAP,GAAAC,CAG5B,CAAA,CACxB,CAAA,CACF,CAAA,CAAA,CAIR,gzEClCAQ,EAAAC,EAAA,WAE0B,CAAA,CAEtB,KAAAC,EAAA,OACS,YAAAC,EAAA,GACO,SAAAC,EAAA,GACH,MAAAC,EACX,SAAAC,EACA,QAAApB,EACA,GAAAqB,EACA,QAAAC,EACA,KAAAC,EACA,UAAArB,EACA,OAAAsB,EACA,SAAAC,EACA,WAAAC,CACA,EAAAC,IAAA,CAIF,KAAA,CAAA,oBAAAC,CAAA,EAAAC,EAAA,CAAuD,SAAAJ,EACrD,WAAAC,CACA,CAAA,EAGF,CAAA,cAAAI,EAAA,0BAAAC,CAAA,EAAAC,EAAA,CAAsE,KAAAhB,EACpE,MAAAG,EACA,YAAAF,CACA,CAAA,EAGFgB,EAAAC,EAAAlB,CAAA,EAGA,OAAAH,EAAA,IACE,QAAC,CAAA,GAAAQ,EACC,KAAAE,EACA,IAAAI,EACA,QAAAQ,GAAA,CAEEJ,EAAA,EAAA,EACAT,GAAA,MAAAA,EAAAa,EAAW,EACb,OAAAA,GAAA,CAEEJ,EAAA,EAAA,EACAP,GAAA,MAAAA,EAAAW,EAAU,EACZ,KAAAnB,EACA,YAAAC,EACA,QAAAjB,EACA,MAAA8B,EACO,UAAAnB,EACI,GAAAC,EAAA,SAAAM,IAAA,aAAAN,EAAA,WAAA,KAAAI,IAAA,UAAAJ,EAAA,UAAAO,GAAAP,EAAA,SAAAgB,KAAA1B,GAG2C,EACtD,SAAA,CAAA,CAAAgB,EACY,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAkB,CAAA,CAAA,IAAAhB,GAAA,YAAAA,EAAAa,EAAAG,CAAA,EAEiC,CAAA,CAE/C,CAGN,EAEOC,EAAA,OAAA,OAAAvB,EAAA,CAAuC,KAAAhB,CAE9C,CAAA"}