{"version":3,"file":"index-3f2066df.js","sources":["../../../src/components/atoms/Dropdown/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\nexport interface DropdownProps {\n  opened?: boolean;\n  children?: React.ReactNode;\n  className?: string;\n}\n\nexport const Dropdown = ({\n  opened = false,\n  children,\n  className,\n}: DropdownProps) => {\n  const [openState, setOpenState] = useState<boolean | 'closing'>(opened);\n  useEffect(\n    () =>\n      setOpenState((prevOpenState) => {\n        if (opened) {\n          return true;\n        }\n        if (prevOpenState) {\n          return 'closing';\n        }\n        return prevOpenState;\n      }),\n    [opened],\n  );\n\n  useEffect(() => {\n    if (openState === 'closing') {\n      const timeout = setTimeout(() => {\n        setOpenState(false);\n      }, 300);\n      return () => clearTimeout(timeout);\n    }\n  }, [openState]);\n\n  return openState ? (\n    <div\n      className={cleanClassName(\n        `${styles.dropdown} ${\n          openState === 'closing' && styles.closing\n        } ${className}`,\n      )}\n    >\n      {children}\n    </div>\n  ) : (\n    <></>\n  );\n};\n"],"names":["Dropdown","opened","children","className","openState","setOpenState","useState","useEffect","prevOpenState","timeout","jsx","cleanClassName","styles","Fragment"],"mappings":"08BAWOA,EAAA,CAAA,CAAkB,OAAAC,EAAA,GACd,SAAAC,EACT,UAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAL,CAAA,EACAM,OAAAA,EAAA,UAAA,IAAAF,EAAAG,GAGMP,EACE,GAEFO,GACE,SAEK,EACR,CAAAP,CAAA,CACI,EAGTM,EAAAA,UAAA,IAAA,CACE,GAAAH,IAAA,UAAA,CACE,MAAAK,EAAA,WAAA,IAAA,CACEJ,EAAA,EAAA,CAAkB,EAAA,GAAA,EAEpB,MAAA,IAAA,aAAAI,CAAA,EACF,EAAA,CAAAL,CAAA,CAAA,EAGFA,EAAAM,EAAA,IACE,MAAC,CAAA,UAAAC,EACY,GAAAC,EAAA,YAAAR,IAAA,WAAAQ,EAAA,WAAAT,GAGL,EACN,SAAAD,CAEC,CAAA,EAAAQ,EAAA,IAAAG,WAAA,CAAA,CAAA,CAKP"}