{"version":3,"file":"index-d303aea3.js","sources":["../../../node_modules/.pnpm/react-feather@2.0.10_react@18.2.0/node_modules/react-feather/dist/icons/copy.js","../../../node_modules/.pnpm/react-node-to-string@0.1.1_react@18.2.0/node_modules/react-node-to-string/build/index.js","../../../src/components/molecules/Table/index.tsx"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Copy = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"rect\", {\n    x: \"9\",\n    y: \"9\",\n    width: \"13\",\n    height: \"13\",\n    rx: \"2\",\n    ry: \"2\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"\n  }));\n});\nCopy.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCopy.displayName = 'Copy';\nexport default Copy;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst reactNodeToString = function (reactNode) {\n    let string = \"\";\n    if (typeof reactNode === \"string\") {\n        string = reactNode;\n    }\n    else if (typeof reactNode === \"number\") {\n        string = reactNode.toString();\n    }\n    else if (reactNode instanceof Array) {\n        reactNode.forEach(function (child) {\n            string += reactNodeToString(child);\n        });\n    }\n    else if ((0, react_1.isValidElement)(reactNode)) {\n        string += reactNodeToString(reactNode.props.children);\n    }\n    return string;\n};\nexports.default = reactNodeToString;\n//# sourceMappingURL=index.js.map","import { isNumber } from 'lodash-es';\n\nimport {\n  useRef,\n  useContext,\n  useMemo,\n  useState,\n  useEffect,\n  createContext,\n  Children,\n} from 'react';\nimport type { ReactNode, Dispatch, SetStateAction } from 'react';\nimport { Copy } from 'react-feather';\nimport nodeToString from 'react-node-to-string';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\nimport { Button } from '../../atoms';\n\ninterface TitleData {\n  order: {\n    origin: number;\n    current: number;\n  };\n  width?: number;\n}\n\ninterface TableState {\n  titles: TitleData[];\n  draggingOrder?: number;\n  dropOrder?: number;\n  hoveredOrder?: number;\n}\n\ninterface TableContextValue {\n  tableState: TableState;\n  setTableState: Dispatch<SetStateAction<TableState>>;\n  fixedTitleCount: number;\n  isLeftScrolled: boolean;\n}\n\nconst TableContext = createContext<TableContextValue>({\n  tableState: {\n    titles: [],\n  },\n  setTableState: () => undefined,\n  fixedTitleCount: 0,\n  isLeftScrolled: false,\n});\n\ninterface CommonProps {\n  className?: string;\n  children?: ReactNode;\n}\n\nexport interface TableProps extends CommonProps {\n  fixedTitleCount: number;\n}\n\nconst TableMain = ({ className, children, fixedTitleCount }: TableProps) => {\n  const [tableState, setTableState] = useState<TableState>({\n    titles: [],\n  });\n  const [isLeftScrolled, setIsLeftScrolled] = useState(false);\n\n  const tableContextValue: TableContextValue = useMemo(\n    () => ({\n      tableState,\n      setTableState,\n      fixedTitleCount,\n      isLeftScrolled,\n    }),\n    [fixedTitleCount, tableState, isLeftScrolled],\n  );\n\n  return (\n    <article\n      className={cleanClassName(`${styles.table} ${className}`)}\n      onScroll={(e) => setIsLeftScrolled(e.currentTarget.scrollLeft > 0)}\n    >\n      <table>\n        <TableContext.Provider value={tableContextValue}>\n          {children}\n        </TableContext.Provider>\n      </table>\n    </article>\n  );\n};\n\nexport type TableHeaderProps = CommonProps;\n\nconst TableHeader = ({ children, className }: TableHeaderProps) => {\n  const titleCount = Children.count(children);\n  const {\n    setTableState,\n    tableState: { titles },\n  } = useContext(TableContext);\n  useEffect(() => {\n    setTableState((prevState) => ({\n      ...prevState,\n      titles: Array.from(\n        {\n          length: titleCount,\n        },\n        (_, index) => ({\n          order: {\n            origin: index,\n            current: index,\n          },\n        }),\n      ),\n    }));\n  }, [titleCount, setTableState]);\n\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <thead className={cleanClassName(`${styles.header} ${className}`)}>\n      <tr>{titles.map(({ order: { origin } }) => childrenArray[origin])}</tr>\n    </thead>\n  );\n};\n\nexport interface TableTitleProps extends CommonProps {\n  width?: React.CSSProperties['width'];\n}\n\nconst TableTitle = ({ children, width, className }: TableTitleProps) => {\n  const { tableState, setTableState, fixedTitleCount, isLeftScrolled } =\n    useContext(TableContext);\n\n  const { titles } = tableState;\n\n  const ref = useRef<HTMLTableCellElement>(null);\n\n  useEffect(() => {\n    const { current: element } = ref;\n    if (element) {\n      const { offsetWidth, cellIndex } = element;\n      setTableState((prevState) => {\n        prevState.titles[cellIndex].width = offsetWidth;\n\n        return { ...prevState };\n      });\n    }\n  }, [ref, setTableState, width]);\n\n  const currentOrder = ref.current?.cellIndex ?? -1;\n\n  const { draggingOrder, hoveredOrder, dropOrder } = tableState;\n\n  const setHoveredOrder = (hoveredOrder?: number) => {\n    if (draggingOrder === undefined) {\n      setTableState((prevState) => ({\n        ...prevState,\n        hoveredOrder,\n      }));\n    }\n  };\n\n  const handleDrop = () => {\n    if (isNumber(draggingOrder) && currentOrder >= 0) {\n      let sortedTitles = [...titles];\n\n      const [draggingTitle] = sortedTitles.splice(draggingOrder, 1);\n\n      sortedTitles = sortedTitles.sort(\n        (a, b) => a.order.current - b.order.current,\n      );\n\n      const { order } = titles[currentOrder];\n\n      sortedTitles = [\n        ...sortedTitles.slice(0, order.current),\n        draggingTitle,\n        ...sortedTitles.slice(order.current),\n      ];\n\n      sortedTitles.forEach((title, newOrder) => {\n        title.order.current = newOrder;\n      });\n\n      const newTableState = {\n        ...tableState,\n        titles: sortedTitles,\n        dropOrder: undefined,\n        draggingOrder: undefined,\n        hoveredOrder: undefined,\n      };\n\n      setTableState(newTableState);\n\n      setTimeout(() =>\n        setTableState({\n          ...newTableState,\n          hoveredOrder: currentOrder,\n        }),\n      );\n    }\n  };\n\n  let left = 0;\n  for (let i = 0; i < currentOrder; i += 1) {\n    left += titles[i]?.width ?? 0;\n  }\n\n  const isDropTarget = dropOrder === currentOrder;\n  const isDragging = draggingOrder === currentOrder;\n  const isFixed = currentOrder < fixedTitleCount;\n  const isLastFixed = currentOrder === fixedTitleCount - 1;\n  const isHovered = hoveredOrder === currentOrder;\n  return (\n    <th\n      style={{\n        left,\n      }}\n      className={cleanClassName(\n        `${styles.title} ${isFixed && styles.fixed} ${\n          isLastFixed && isLeftScrolled && styles.shadow\n        } ${isHovered && styles.hovered} ${\n          isDropTarget &&\n          (isDragging ||\n            ((draggingOrder ?? 0) > dropOrder\n              ? styles['drop-left']\n              : styles['drop-right']))\n        } ${isDragging && (isDropTarget ? styles.restoring : styles.dragging)} \n\n        } ${\n          isDragging && (isDropTarget ? styles.restoring : styles.dragging)\n        } ${className}`,\n      )}\n      ref={ref}\n      draggable\n      onMouseEnter={() => setHoveredOrder(currentOrder)}\n      onMouseLeave={() => setHoveredOrder()}\n      onDragOver={(e) => e.preventDefault()}\n      onDragStart={() =>\n        setTableState((prevState) => ({\n          ...prevState,\n          draggingOrder: currentOrder,\n        }))\n      }\n      onDragEnter={() =>\n        setTableState((prevState) => ({\n          ...prevState,\n          dropOrder: currentOrder,\n        }))\n      }\n      onDrop={handleDrop}\n    >\n      <div\n        className={styles['title-content']}\n        style={{\n          width,\n        }}\n      >\n        {children}\n      </div>\n    </th>\n  );\n};\n\nexport type TableBodyProps = CommonProps;\n\nconst TableBody = ({ children, className }: TableBodyProps) => (\n  <tbody className={className}>{children}</tbody>\n);\n\nexport type TableRowProps = CommonProps;\n\nconst TableRow = ({ children, className }: TableRowProps) => {\n  const {\n    tableState: { titles },\n  } = useContext(TableContext);\n\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <tr className={cleanClassName(`${styles.row} ${className}`)}>\n      {titles.map(({ order: { origin } }) => childrenArray[origin])}\n    </tr>\n  );\n};\n\nexport interface TableCellProps extends CommonProps {\n  onCopy?: (value: string) => void;\n}\n\nconst TableCell = ({ children, onCopy, className }: TableCellProps) => {\n  const {\n    tableState: { titles, hoveredOrder, draggingOrder, dropOrder },\n    fixedTitleCount,\n    isLeftScrolled,\n    setTableState,\n  } = useContext(TableContext);\n\n  const ref = useRef<HTMLTableCellElement>(null);\n  const currentOrder = ref.current?.cellIndex ?? -1;\n\n  const { width } = titles[currentOrder ?? 0] ?? {};\n  let left = 0;\n  for (let i = 0; i < currentOrder; i += 1) {\n    left += titles[i]?.width ?? 0;\n  }\n\n  const [isHovered, setIsHovered] = useState(false);\n\n  const isDropTarget = dropOrder === currentOrder;\n  const isDragging = draggingOrder === currentOrder;\n  const isFixed = currentOrder < fixedTitleCount;\n  const isLastFixed = currentOrder === fixedTitleCount - 1;\n  const isTitleHovered = hoveredOrder === currentOrder;\n\n  useEffect(\n    () => setTableState((tableState) => ({ ...tableState })),\n    [children, setTableState],\n  );\n\n  return (\n    <td\n      ref={ref}\n      style={{\n        left,\n      }}\n      className={cleanClassName(\n        `${styles.cell} ${isFixed && styles.fixed} ${\n          isLastFixed && isLeftScrolled && styles.shadow\n        } ${isTitleHovered && styles.hovered} ${\n          isDropTarget &&\n          (isDragging ||\n            ((draggingOrder ?? 0) > dropOrder\n              ? styles['drop-left']\n              : styles['drop-right']))\n        } ${\n          isDragging && (isDropTarget ? styles.restoring : styles.dragging)\n        } ${className}`,\n      )}\n    >\n      {width === undefined ? null : (\n        <div\n          style={{\n            width,\n          }}\n          className={styles['cell-content-container']}\n          onMouseEnter={({ currentTarget }) => {\n            if (\n              currentTarget.scrollWidth > currentTarget.clientWidth ||\n              onCopy\n            ) {\n              setIsHovered(true);\n            }\n          }}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          {isHovered ? (\n            <div className={styles.hidden}>{children}</div>\n          ) : (\n            children\n          )}\n          {isHovered ? (\n            <div className={styles['hovered-cell-content']}>\n              {children}\n              {onCopy ? (\n                <div className={styles['copy-button-wrap']}>\n                  <Button\n                    className={styles['copy-button']}\n                    size=\"small3x\"\n                    shape=\"round\"\n                    theme=\"bluish-gray700/0\"\n                    icon={<Copy size={14} />}\n                    onClick={() => {\n                      const childrenString = nodeToString(children);\n                      navigator.clipboard.writeText(childrenString);\n                      onCopy?.(childrenString);\n                    }}\n                  />\n                </div>\n              ) : null}\n            </div>\n          ) : null}\n        </div>\n      )}\n    </td>\n  );\n};\n\nexport const Table = Object.assign(TableMain, {\n  Header: TableHeader,\n  Title: TableTitle,\n  Body: TableBody,\n  Row: TableRow,\n  Cell: TableCell,\n});\n"],"names":["_extends","target","i","source","key","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","sourceKeys","Copy","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","PropTypes","Copy$1","build","react_1","require$$0","reactNodeToString","reactNode","string","child","_default","TableContext","createContext","TableMain","className","children","fixedTitleCount","tableState","setTableState","useState","isLeftScrolled","setIsLeftScrolled","tableContextValue","useMemo","jsx","cleanClassName","styles","e","TableHeader","titleCount","Children","titles","useContext","useEffect","prevState","_","index","childrenArray","origin","TableTitle","width","useRef","element","offsetWidth","cellIndex","currentOrder","_a","draggingOrder","hoveredOrder","dropOrder","setHoveredOrder","hoveredOrder2","handleDrop","isNumber","sortedTitles","draggingTitle","a","b","order","title","newOrder","newTableState","left","_b","isDropTarget","isDragging","isFixed","isLastFixed","isHovered","TableBody","TableRow","TableCell","onCopy","setIsHovered","isTitleHovered","jsxs","currentTarget","Button","childrenString","nodeToString","Table"],"mappings":"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","x_google_ignoreList":[0,1]}