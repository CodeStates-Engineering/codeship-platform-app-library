{"version":3,"file":"index-2393d075.js","sources":["../../../src/components/atoms/Input/index.tsx"],"sourcesContent":["import type { Ref } from 'react';\nimport { useState, useMemo, forwardRef } from 'react';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\n\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'large-number'\n  | 'phone-number'\n  | 'business-number'\n  | 'password'\n  | 'button';\n\nexport interface InputProps<T extends InputType = 'text'>\n  extends Pick<\n    React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >,\n    'placeholder' | 'onFocus' | 'id' | 'onClick'\n  > {\n  type?: T;\n  value?: T extends 'number' | 'large-number' ? number : string;\n  disabled?: boolean | 'read-only';\n  onChange?: (value: InputProps<T>['value']) => void;\n  ref?: Ref<HTMLInputElement>;\n  name?: string;\n  className?: string;\n}\n\nexport const Input: <T extends InputType = 'text'>(\n  props: InputProps<T>,\n) => JSX.Element | null = forwardRef(\n  (\n    {\n      type = 'text',\n      placeholder = '',\n      disabled = false,\n      value,\n      onChange,\n      onClick,\n      id,\n      onFocus,\n      name,\n      className,\n    },\n    ref,\n  ) => {\n    const [isFocused, setIsFucused] = useState(false);\n\n    const formatedValue = (() => {\n      if (type === 'button' && !value) {\n        return placeholder;\n      }\n\n      if (value !== 0 && !value) {\n        return '';\n      }\n\n      const valueString = String(value);\n\n      if (isFocused) {\n        return valueString;\n      }\n\n      switch (type) {\n        case 'number':\n          return valueString;\n\n        case 'large-number':\n          return Number(valueString).toLocaleString();\n\n        case 'phone-number':\n          if (valueString.length === 10) {\n            return valueString.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n          }\n          return valueString.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\n\n        case 'business-number':\n          return valueString.replace(/(\\d{3})(\\d{2})(\\d{5})/, '$1-$2-$3');\n\n        default:\n          return valueString;\n      }\n    })();\n\n    const convertChangeHandlerParam = useMemo(() => {\n      const leftOnlyNumber = (value: string) => value.replace(/[^0-9]/g, '');\n      switch (type) {\n        case 'number':\n        case 'large-number':\n          return (value) => (value ? Number(leftOnlyNumber(value)) : undefined);\n\n        case 'phone-number':\n          return (value) => {\n            let numberString = leftOnlyNumber(value);\n            if (numberString.length > 11) {\n              numberString = numberString.slice(0, 11);\n            }\n            return value ? numberString : undefined;\n          };\n\n        case 'business-number':\n          return (value) => {\n            let numberString = leftOnlyNumber(value);\n            if (numberString.length > 10) {\n              numberString = numberString.slice(0, 10);\n            }\n            return value ? numberString : undefined;\n          };\n\n        default:\n          return (value) => value || undefined;\n      }\n    }, [type]) as (param: string) => typeof value;\n\n    return (\n      <input\n        id={id}\n        name={name}\n        ref={ref}\n        onFocus={(e) => {\n          setIsFucused(true);\n          onFocus?.(e);\n        }}\n        onBlur={() => setIsFucused(false)}\n        type={type}\n        placeholder={placeholder}\n        onClick={onClick}\n        value={formatedValue}\n        className={cleanClassName(\n          `${styles.input} ${disabled === 'read-only' && styles['read-only']} ${\n            type === 'button' && styles.button\n          } ${value || styles.empty} ${styles['default-width']} ${className}`,\n        )}\n        disabled={!!disabled}\n        onChange={({ target: { value } }) =>\n          onChange?.(convertChangeHandlerParam(value))\n        }\n      />\n    );\n  },\n);\n"],"names":["Input","forwardRef","type","placeholder","disabled","value","onChange","onClick","id","onFocus","name","className","ref","isFocused","setIsFucused","useState","formatedValue","valueString","convertChangeHandlerParam","useMemo","leftOnlyNumber","value2","numberString","jsx","cleanClassName","styles"],"mappings":"y9BAgCOA,EAAAC,EAAA,WAEmB,CAAA,CAEtB,KAAAC,EAAA,OACS,YAAAC,EAAA,GACO,SAAAC,EAAA,GACH,MAAAC,EACX,SAAAC,EACA,QAAAC,EACA,GAAAC,EACA,QAAAC,EACA,KAAAC,EACA,UAAAC,CACA,EAAAC,IAAA,CAIF,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAC,GAAA,IAAA,CACE,GAAAd,IAAA,UAAA,CAAAG,EACE,OAAAF,EAGF,GAAAE,IAAA,GAAA,CAAAA,EACE,MAAA,GAGF,MAAAY,EAAA,OAAAZ,CAAA,EAEA,GAAAQ,EACE,OAAAI,EAGF,OAAAf,EAAA,CAAc,IAAA,SAEV,OAAAe,EAAO,IAAA,eAGP,OAAA,OAAAA,CAAA,EAAA,iBAA0C,IAAA,eAG1C,OAAAA,EAAA,SAAA,GACEA,EAAA,QAAA,wBAAA,UAAA,EAEFA,EAAA,QAAA,wBAAA,UAAA,EAA8D,IAAA,kBAG9D,OAAAA,EAAA,QAAA,wBAAA,UAAA,EAA8D,QAG9D,OAAAA,CAAO,CACX,KAGFC,EAAAC,EAAAA,QAAA,IAAA,CACE,MAAAC,EAAAC,GAAAA,EAAA,QAAA,UAAA,EAAA,EACA,OAAAnB,EAAA,CAAc,IAAA,SACP,IAAA,eAEH,OAAAmB,GAAAA,EAAA,OAAAD,EAAAC,CAAA,CAAA,EAAA,OAA2D,IAAA,eAG3D,OAAAA,GAAA,CACE,IAAAC,EAAAF,EAAAC,CAAA,EACA,OAAAC,EAAA,OAAA,KACEA,EAAAA,EAAA,MAAA,EAAA,EAAA,GAEFD,EAAAC,EAAA,MAA8B,EAChC,IAAA,kBAGA,OAAAD,GAAA,CACE,IAAAC,EAAAF,EAAAC,CAAA,EACA,OAAAC,EAAA,OAAA,KACEA,EAAAA,EAAA,MAAA,EAAA,EAAA,GAEFD,EAAAC,EAAA,MAA8B,EAChC,QAGA,OAAAD,GAAAA,GAAA,MAA2B,CAC/B,EAAA,CAAAnB,CAAA,CAAA,EAGF,OAAAqB,EAAA,IACE,QAAC,CAAA,GAAAf,EACC,KAAAE,EACA,IAAAE,EACA,QAAA,GAAA,CAEEE,EAAA,EAAA,EACAL,GAAA,MAAAA,EAAA,EAAW,EACb,OAAA,IAAAK,EAAA,EAAA,EACgC,KAAAZ,EAChC,YAAAC,EACA,QAAAI,EACA,MAAAS,EACO,UAAAQ,EACI,GAAAC,EAAA,SAAArB,IAAA,aAAAqB,EAAA,WAAA,KAAAvB,IAAA,UAAAuB,EAAA,UAAApB,GAAAoB,EAAA,SAAAA,EAAA,eAAA,KAAAd,GAG+C,EAC1D,SAAA,CAAA,CAAAP,EACY,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAiB,CAAA,CAAA,IAAAf,GAAA,YAAAA,EAAAY,EAAAG,CAAA,EAEiC,CAAA,CAE/C,CAGN"}