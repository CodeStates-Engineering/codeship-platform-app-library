{"version":3,"file":"index-fff92b81.js","sources":["../../../src/components/atoms/Input/index.tsx"],"sourcesContent":["import type { Ref } from 'react';\nimport {\n  useState,\n  useMemo,\n  forwardRef,\n  createContext,\n  useContext,\n} from 'react';\n\nimport styles from './index.module.scss';\nimport { useTypography } from '../../../hooks';\nimport { cleanClassName } from '../../../utils';\n\nimport type { Typography } from '../../../hooks';\n\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'large-number'\n  | 'phone-number'\n  | 'business-number'\n  | 'password'\n  | 'button';\n\nexport interface InputProps<T extends InputType = 'text'>\n  extends Pick<\n      React.DetailedHTMLProps<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        HTMLInputElement\n      >,\n      'placeholder' | 'onFocus' | 'id' | 'onClick'\n    >,\n    Typography {\n  type?: T;\n  value?: T extends 'number' | 'large-number' ? number : string;\n  disabled?: boolean | 'read-only';\n  onChange?: (value: InputProps<T>['value']) => void;\n  ref?: Ref<HTMLInputElement>;\n  name?: string;\n  className?: string;\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n}\n\nconst InputMain: <T extends InputType = 'text'>(\n  props: InputProps<T>,\n) => JSX.Element | null = forwardRef(\n  (\n    {\n      type = 'text',\n      placeholder = '',\n      disabled = false,\n      value,\n      onChange,\n      onClick,\n      id,\n      onFocus,\n      name,\n      className,\n      onBlur,\n      fontSize,\n      fontWeight,\n    },\n    ref,\n  ) => {\n    const [isFocused, setIsFocused] = useState(false);\n    const { fontSizeClassName, fontWeightClassName } = useTypography(\n      fontSize,\n      fontWeight,\n    );\n    const formatedValue = (() => {\n      if (type === 'button' && !value) {\n        return placeholder;\n      }\n\n      if (value !== 0 && !value) {\n        return '';\n      }\n\n      const valueString = String(value);\n\n      if (isFocused) {\n        return valueString;\n      }\n\n      switch (type) {\n        case 'number':\n          return valueString;\n\n        case 'large-number':\n          return Number(valueString).toLocaleString();\n\n        case 'phone-number':\n          if (valueString.length === 10) {\n            return valueString.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n          }\n          return valueString.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3');\n\n        case 'business-number':\n          return valueString.replace(/(\\d{3})(\\d{2})(\\d{5})/, '$1-$2-$3');\n\n        default:\n          return valueString;\n      }\n    })();\n\n    const convertChangeHandlerParam = useMemo(() => {\n      const leftOnlyNumber = (value: string) => value.replace(/[^0-9]/g, '');\n      switch (type) {\n        case 'number':\n        case 'large-number':\n          return (value) => (value ? Number(leftOnlyNumber(value)) : undefined);\n\n        case 'phone-number':\n          return (value) => {\n            let numberString = leftOnlyNumber(value);\n            if (numberString.length > 11) {\n              numberString = numberString.slice(0, 11);\n            }\n            return value ? numberString : undefined;\n          };\n\n        case 'business-number':\n          return (value) => {\n            let numberString = leftOnlyNumber(value);\n            if (numberString.length > 10) {\n              numberString = numberString.slice(0, 10);\n            }\n            return value ? numberString : undefined;\n          };\n\n        default:\n          return (value) => value || undefined;\n      }\n    }, [type]) as (param: string) => typeof value;\n\n    return (\n      <input\n        id={id}\n        name={name}\n        ref={ref}\n        onFocus={(e) => {\n          setIsFocused(true);\n          onFocus?.(e);\n        }}\n        onBlur={(e) => {\n          setIsFocused(false);\n          onBlur?.(e);\n        }}\n        type={type}\n        placeholder={placeholder}\n        onClick={onClick}\n        value={formatedValue}\n        className={cleanClassName(\n          `${styles.input} ${disabled === 'read-only' && styles['read-only']} ${\n            type === 'button' && styles.button\n          } ${value || styles.empty} ${styles[fontSizeClassName]} ${\n            styles[fontWeightClassName]\n          } ${styles['default-width']} ${className}`,\n        )}\n        disabled={!!disabled}\n        onChange={({ target: { value } }) =>\n          onChange?.(convertChangeHandlerParam(value))\n        }\n      />\n    );\n  },\n);\n\ninterface CommonProps {\n  children?: React.ReactNode;\n  className?: string;\n}\n\nexport interface InputContainerProps extends CommonProps {\n  validationMessage?: string | null;\n  validationSpace?: boolean;\n}\n\nconst InputContainerContext =\n  createContext<InputContainerProps['validationMessage']>(undefined);\n\nconst InputContainer = ({\n  children,\n  className,\n  validationMessage,\n  validationSpace,\n}: InputContainerProps) => (\n  <div className={cleanClassName(`${styles['input-container']} ${className}`)}>\n    <InputContainerContext.Provider value={validationMessage}>\n      <div className={styles['input-interaction-wrap']}>{children}</div>\n    </InputContainerContext.Provider>\n    {validationMessage ? (\n      <p className={styles['validation-message']}>{validationMessage}</p>\n    ) : (\n      validationSpace && <div className={styles['validation-space']} />\n    )}\n  </div>\n);\n\nexport interface InputWrapProps extends CommonProps {\n  onClick?: React.HTMLAttributes<HTMLDivElement>['onClick'];\n  size?: 'none' | 'small' | 'medium' | 'large';\n  borderRadius?: '4' | '8';\n  width?: CSSStyleDeclaration['width'];\n}\n\nconst InputWrap = ({\n  children,\n  onClick,\n  size = 'large',\n  className,\n  borderRadius = '8',\n  width,\n}: InputWrapProps) => {\n  const validationMessage = useContext(InputContainerContext);\n  const style = useMemo(() => ({ width }), [width]);\n\n  return (\n    <div\n      className={cleanClassName(\n        `${styles['input-wrap']} ${styles[`border-radius-${borderRadius}`]} ${\n          validationMessage && styles.error\n        } ${size !== 'none' && styles[`size-${size}`]} ${className}`,\n      )}\n      style={style}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const Input = Object.assign(InputMain, {\n  Container: InputContainer,\n  Wrap: InputWrap,\n});\n"],"names":["InputMain","forwardRef","type","placeholder","disabled","value","onChange","onClick","id","onFocus","name","className","onBlur","fontSize","fontWeight","ref","isFocused","setIsFocused","useState","fontSizeClassName","fontWeightClassName","useTypography","formatedValue","valueString","convertChangeHandlerParam","useMemo","leftOnlyNumber","value2","numberString","jsx","cleanClassName","styles","InputContainerContext","createContext","InputContainer","children","validationMessage","validationSpace","jsxs","InputWrap","size","borderRadius","width","useContext","style","Input"],"mappings":"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"}