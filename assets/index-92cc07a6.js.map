{"version":3,"file":"index-92cc07a6.js","sources":["../../../src/components/molecules/Textbox/index.tsx"],"sourcesContent":["import { Input, Label } from '@components/atoms';\nimport type {\n  InputProps,\n  InputType,\n  InputWrapProps,\n  LabelContainerProps,\n} from '@components/atoms';\nimport { useSubscribedState, useValidationMessage } from '@hooks';\nimport type { ValidateHandler, UseTypographyClassNameParams } from '@hooks';\n\nimport styles from './index.module.scss';\n\ntype TextboxType = Exclude<InputType, 'button'>;\n\nexport interface TextboxProps<T extends TextboxType = 'text'>\n  extends Pick<\n    InputProps<T>,\n    | 'value'\n    | 'onChange'\n    | 'type'\n    | 'placeholder'\n    | 'disabled'\n    | 'onFocus'\n    | 'ref'\n    | 'id'\n    | 'onClick'\n    | 'className'\n    | 'onBlur'\n  > {\n  label?: string;\n  unit?: React.ReactNode;\n  validation?: ValidateHandler<TextboxProps<T>['value']>;\n  labelStyle?: Pick<LabelContainerProps, 'direction'> &\n    UseTypographyClassNameParams;\n  inputStyle?: Pick<InputWrapProps, 'borderRadius' | 'width' | 'size'> &\n    UseTypographyClassNameParams;\n}\n\nexport const Textbox = <T extends TextboxType = 'text'>({\n  value: originalValue,\n  unit,\n  onChange,\n  type = 'text' as T,\n  placeholder,\n  disabled,\n  onFocus,\n  id,\n  onClick,\n  ref,\n  label,\n  validation,\n  className,\n  onBlur,\n  labelStyle,\n  inputStyle,\n}: TextboxProps<T>) => {\n  const [value, setValue] = useSubscribedState(originalValue);\n\n  const { validationMessage, validateValue } = useValidationMessage({\n    validateHandler: validation,\n    key: label,\n    value,\n  });\n\n  return (\n    <Label.WithInput\n      className={className}\n      inputStyle={inputStyle}\n      labelStyle={labelStyle}\n      label={label}\n    >\n      <Input.Wrap\n        validationMessage={validationMessage}\n        size={inputStyle?.size}\n        borderRadius={inputStyle?.borderRadius}\n        width={inputStyle?.width}\n      >\n        <Input\n          fontSize={inputStyle?.fontSize}\n          fontWeight={inputStyle?.fontWeight}\n          onClick={onClick}\n          onBlur={onBlur}\n          ref={ref}\n          name={label}\n          disabled={disabled}\n          placeholder={placeholder}\n          onFocus={onFocus}\n          value={value}\n          id={id}\n          onChange={(value) => {\n            setValue?.(value);\n            validateValue(value);\n            onChange?.(value);\n          }}\n          type={type}\n        />\n        {typeof unit === 'string' ? (\n          <div className={styles.unit}>{unit}</div>\n        ) : (\n          unit\n        )}\n      </Input.Wrap>\n    </Label.WithInput>\n  );\n};\n"],"names":["Textbox","originalValue","unit","onChange","type","placeholder","disabled","onFocus","id","onClick","ref","label","validation","className","onBlur","labelStyle","inputStyle","value","setValue","useSubscribedState","validationMessage","validateValue","useValidationMessage","jsx","Label","jsxs","Input","value2","styles"],"mappings":"ipCAsCOA,EAAA,CAAA,CAAiD,MAAAC,EAC/C,KAAAC,EACP,SAAAC,EACA,KAAAC,EAAA,OACO,YAAAC,EACP,SAAAC,EACA,QAAAC,EACA,GAAAC,EACA,QAAAC,EACA,IAAAC,EACA,MAAAC,EACA,WAAAC,EACA,UAAAC,EACA,OAAAC,EACA,WAAAC,EACA,WAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAlB,CAAA,EAEA,CAAA,kBAAAmB,EAAA,cAAAC,CAAA,EAAAC,EAAA,CAAkE,gBAAAV,EAC/C,IAAAD,EACZ,MAAAM,CACL,CAAA,EAGF,OAAAM,EAAA,IACEC,EAAA,UAAO,CAAN,UAAAX,EACC,WAAAG,EACA,WAAAD,EACA,MAAAJ,EACA,SAAAc,EAAA,KAEAC,EAAA,KAAO,CAAN,kBAAAN,EACC,KAAAJ,GAAA,YAAAA,EAAA,KACkB,aAAAA,GAAA,YAAAA,EAAA,aACQ,MAAAA,GAAA,YAAAA,EAAA,MACP,SAAA,CAEnBO,EAAA,IAAAG,EAAC,CAAA,SAAAV,GAAA,YAAAA,EAAA,SACuB,WAAAA,GAAA,YAAAA,EAAA,WACE,QAAAP,EACxB,OAAAK,EACA,IAAAJ,EACA,KAAAC,EACM,SAAAL,EACN,YAAAD,EACA,QAAAE,EACA,MAAAU,EACA,GAAAT,EACA,SAAAmB,GAAA,CAEET,GAAA,MAAAA,EAAAS,GACAN,EAAAM,CAAA,EACAxB,GAAA,MAAAA,EAAAwB,EAAgB,EAClB,KAAAvB,CACA,CAAA,EACF,OAAAF,GAAA,SAAAqB,EAAA,IAAA,MAAA,CAAA,UAAAK,EAAA,KAAA,SAAA1B,CAAA,CAAA,EAAAA,CAIE,CAAA,CAAA,CAEJ,CAAA,CAGN"}