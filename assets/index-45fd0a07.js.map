{"version":3,"file":"index-45fd0a07.js","sources":["../../../src/components/molecules/Textarea/index.tsx"],"sourcesContent":["import type { DetailedHTMLProps, TextareaHTMLAttributes } from 'react';\nimport { useMemo } from 'react';\n\nimport {\n  useSubscribedState,\n  useTypographyClassName,\n  useValidation,\n} from '@hooks';\nimport type { Validation, UseTypographyClassNameParams } from '@hooks';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\nimport { Input, Label } from '../../atoms';\nimport { Tag } from '../Tag';\n\nimport type { InputWrapProps, LabelContainerProps } from '../../atoms';\n\nexport interface TextareaProps\n  extends Pick<\n      DetailedHTMLProps<\n        TextareaHTMLAttributes<HTMLTextAreaElement>,\n        HTMLTextAreaElement\n      >,\n      'placeholder' | 'id'\n    >,\n    Pick<InputWrapProps, 'onClick'> {\n  onChange?: (value?: string) => void;\n  value?: string;\n  validation?: Validation<TextareaProps['value']>;\n  label?: string;\n  className?: string;\n  disabled?: boolean | 'read-only';\n  inputStyle?: {\n    resize?: boolean;\n    height?: React.CSSProperties['height'];\n  } & Pick<InputWrapProps, 'borderRadius' | 'width'> &\n    UseTypographyClassNameParams;\n  labelStyle?: Pick<LabelContainerProps, 'direction'> &\n    UseTypographyClassNameParams;\n  floatingActionName?: string;\n  onFloatingActionClick?: () => void;\n}\n\nexport const Textarea = ({\n  placeholder = '',\n  value: originalValue,\n  onChange,\n  disabled,\n  validation,\n  id,\n  label,\n  className,\n  onClick,\n  inputStyle,\n  labelStyle,\n  floatingActionName,\n  onFloatingActionClick,\n}: TextareaProps) => {\n  const [textareaValue, setTextareaValue] = useSubscribedState(\n    originalValue ?? '',\n  );\n\n  const { typographyClassName } = useTypographyClassName({\n    fontSize: inputStyle?.fontSize,\n    fontWeight: inputStyle?.fontWeight,\n  });\n\n  const { validationMessage, checkValidation } = useValidation(\n    textareaValue,\n    validation,\n    label,\n  );\n\n  const style = useMemo(\n    () => ({\n      height: inputStyle?.height,\n    }),\n    [inputStyle?.height],\n  );\n\n  return (\n    <Label.Container direction={labelStyle?.direction} className={className}>\n      {label ? (\n        <Label\n          htmlFor={label}\n          fontSize={labelStyle?.fontSize}\n          fontWeight={labelStyle?.fontWeight}\n        >\n          {label}\n        </Label>\n      ) : null}\n      <Input.Wrap\n        validationMessage={validationMessage}\n        size=\"none\"\n        onClick={onClick}\n        width={inputStyle?.width}\n        borderRadius={inputStyle?.borderRadius}\n      >\n        {floatingActionName && (\n          <div className={styles['floating-action-container']}>\n            <Tag color=\"purple50\" onClick={onFloatingActionClick}>\n              {floatingActionName}\n            </Tag>\n          </div>\n        )}\n\n        <textarea\n          id={id}\n          name={label}\n          value={textareaValue}\n          placeholder={placeholder}\n          style={style}\n          onChange={({ target: { value } }) => {\n            setTextareaValue?.(value);\n            onChange?.(value);\n            checkValidation?.(value);\n          }}\n          disabled={!!disabled}\n          className={cleanClassName(\n            `${styles['textarea-content']} ${\n              (inputStyle?.resize ?? true) && styles.resize\n            } ${typographyClassName} ${\n              disabled === 'read-only' && [styles['read-only']]\n            } ${styles['full-size']}`,\n          )}\n        />\n      </Input.Wrap>\n    </Label.Container>\n  );\n};\n"],"names":["Textarea","placeholder","originalValue","onChange","disabled","validation","id","label","className","onClick","inputStyle","labelStyle","floatingActionName","onFloatingActionClick","textareaValue","setTextareaValue","useSubscribedState","typographyClassName","useTypographyClassName","validationMessage","checkValidation","useValidation","style","useMemo","jsxs","Label","jsx","Input","styles","Tag","value","cleanClassName"],"mappings":"4hEA2COA,EAAA,CAAA,CAAkB,YAAAC,EAAA,GACT,MAAAC,EACP,SAAAC,EACP,SAAAC,EACA,WAAAC,EACA,GAAAC,EACA,MAAAC,EACA,UAAAC,EACA,QAAAC,EACA,WAAAC,EACA,WAAAC,EACA,mBAAAC,EACA,sBAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAA0Cd,GAAA,EACvB,EAGnB,CAAA,oBAAAe,CAAA,EAAAC,EAAA,CAAuD,SAAAR,GAAA,YAAAA,EAAA,SAC/B,WAAAA,GAAA,YAAAA,EAAA,UACE,CAAA,EAG1B,CAAA,kBAAAS,EAAA,gBAAAC,CAAA,EAAAC,EAA+CP,EAC7CT,EACAE,CACA,EAGFe,EAAAC,EAAA,QAAc,KAAA,CACL,OAAAb,GAAA,YAAAA,EAAA,MACe,GACtB,CAAAA,GAAA,YAAAA,EAAA,MAAA,CACmB,EAGrB,OAAAc,EAAA,KAAAC,EAAA,UAAA,CAAA,UAAAd,GAAA,YAAAA,EAAA,UAAA,UAAAH,EAAA,SAAA,CAEKD,EAAAmB,EAAA,IACCD,EAAC,CAAA,QAAAlB,EACU,SAAAI,GAAA,YAAAA,EAAA,SACa,WAAAA,GAAA,YAAAA,EAAA,WACE,SAAAJ,CAEvB,CAAA,EAAA,KAEDiB,EAAA,KACJG,EAAA,KAAO,CAAN,kBAAAR,EACC,KAAA,OACK,QAAAV,EACL,MAAAC,GAAA,YAAAA,EAAA,MACmB,aAAAA,GAAA,YAAAA,EAAA,aACO,SAAA,CAEzBE,GAAAc,EAAA,IAAA,MAAA,CAAA,UAAAE,EAAA,2BAAA,EAAA,SAAAF,EAAAA,IAAAG,EAAA,CAAA,MAAA,WAAA,QAAAhB,EAAA,SAAAD,CAAA,CAAA,EAAA,EAKCc,EAAA,IAGF,WAAC,CAAA,GAAApB,EACC,KAAAC,EACM,MAAAO,EACC,YAAAb,EACP,MAAAqB,EACA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAQ,CAAA,CAAA,IAAA,CAEEf,GAAA,MAAAA,EAAAe,GACA3B,GAAA,MAAAA,EAAA2B,GACAV,GAAA,MAAAA,EAAAU,EAAuB,EACzB,SAAA,CAAA,CAAA1B,EACY,UAAA2B,EACD,GAAAH,EAAA,kBAAA,OAAAlB,GAAA,YAAAA,EAAA,SAAA,KAAAkB,EAAA,UAAAX,KAAAb,IAAA,aAAA,CAAAwB,EAAA,WAAA,CAAA,KAAAA,EAAA,WAAA,GAKa,CACxB,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAGN"}