{"version":3,"file":"index-255ce349.js","sources":["../../../src/components/molecules/Selectbox/index.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { ChevronDown } from 'react-feather';\n\nimport type {\n  InputProps,\n  OptionsProps,\n  ValidOptionValue,\n  InputWrapProps,\n  LabelContainerProps,\n} from '@components/atoms';\nimport { FocusLayer, Options, Input, Label } from '@components/atoms';\nimport type { Validation, Typography } from '@hooks';\nimport { useSubscribedState, useValidation } from '@hooks';\nimport { cleanClassName, getLabelSpace } from '@utils';\n\nimport styles from './index.module.scss';\n\nexport interface SelectboxProps<\n  _ValidOptionValue = ValidOptionValue,\n  _Multiple = boolean,\n> extends Pick<\n      OptionsProps<_ValidOptionValue, _Multiple>,\n      'options' | 'float' | 'onChange' | 'value' | 'multiple' | 'optionStyle'\n    >,\n    Pick<InputProps<'button'>, 'disabled' | 'placeholder' | 'id' | 'ref'>,\n    Pick<InputWrapProps, 'onClick'> {\n  label?: string;\n  validation?: Validation<SelectboxProps<_ValidOptionValue>['value']>;\n\n  className?: string;\n  inputStyle?: Pick<InputWrapProps, 'borderRadius' | 'size' | 'width'> &\n    Typography;\n  labelStyle?: Pick<LabelContainerProps, 'direction'> & Typography;\n}\n\nexport const Selectbox = <\n  _ValidOptionValue extends ValidOptionValue = ValidOptionValue,\n  _Multiple extends boolean = false,\n>({\n  value,\n  options,\n  onChange,\n  float,\n  disabled,\n  placeholder,\n  id,\n  ref,\n  onClick,\n  label,\n  validation,\n\n  className,\n  inputStyle,\n  labelStyle,\n  multiple,\n  optionStyle,\n}: SelectboxProps<_ValidOptionValue, _Multiple>) => {\n  const [opened, setOpened] = useState(false);\n\n  const [selectedValue, setSelectedValue] = useSubscribedState(value);\n\n  const selectedOption = options?.find(({ value }) => value === selectedValue);\n\n  const { validationMessage, checkValidation } = useValidation(\n    selectedValue,\n    validation,\n    label || id,\n  );\n\n  return (\n    <FocusLayer\n      onBlur={() => setOpened(false)}\n      focused={opened}\n      className={cleanClassName(`${styles.selectbox} ${className}`)}\n      bodyScroll\n    >\n      <Label.Container direction={labelStyle?.direction}>\n        {label ? (\n          <Label\n            htmlFor={label}\n            space={getLabelSpace(labelStyle?.direction, inputStyle?.size)}\n            fontSize={labelStyle?.fontSize}\n            fontWeight={labelStyle?.fontWeight}\n          >\n            {label}\n          </Label>\n        ) : null}\n        <Input.Wrap\n          validationMessage={validationMessage}\n          size={inputStyle?.size}\n          borderRadius={inputStyle?.borderRadius}\n          width={inputStyle?.width}\n          onClick={(e) => {\n            setOpened(!opened);\n            onClick?.(e);\n          }}\n        >\n          <Input\n            id={id}\n            name={label}\n            type=\"button\"\n            ref={ref}\n            value={selectedOption?.label}\n            disabled={disabled}\n            placeholder={placeholder}\n            fontSize={inputStyle?.fontSize}\n            fontWeight={inputStyle?.fontWeight}\n          />\n          <ChevronDown\n            className={cleanClassName(\n              `${styles.arrow} ${opened && styles['opened-arrow']}`,\n            )}\n          />\n        </Input.Wrap>\n      </Label.Container>\n      <Options\n        opened={opened}\n        options={options}\n        multiple={multiple}\n        value={selectedValue}\n        float={float}\n        className={styles['select-box-default-width']}\n        optionStyle={optionStyle}\n        onChange={(value) => {\n          setSelectedValue?.(value);\n          checkValidation?.(value);\n          onChange?.(value);\n          setOpened(false);\n        }}\n      />\n    </FocusLayer>\n  );\n};\n"],"names":["Selectbox","value","options","onChange","float","disabled","placeholder","id","ref","onClick","label","validation","className","inputStyle","labelStyle","multiple","optionStyle","opened","setOpened","useState","selectedValue","setSelectedValue","useSubscribedState","selectedOption","value2","validationMessage","checkValidation","useValidation","jsxs","FocusLayer","cleanClassName","styles","Label","jsx","getLabelSpace","Input","e","ChevronDown","Options"],"mappings":"upBAmCOA,EAAA,CAAA,CAGL,MAAAC,EACA,QAAAC,EACA,SAAAC,EACA,MAAAC,EACA,SAAAC,EACA,YAAAC,EACA,GAAAC,EACA,IAAAC,EACA,QAAAC,EACA,MAAAC,EACA,WAAAC,EACA,UAAAC,EAEA,WAAAC,EACA,WAAAC,EACA,SAAAC,EACA,YAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,CAAAC,EAAAC,CAAA,EAAAC,EAAArB,CAAA,EAEAsB,EAAArB,GAAA,YAAAA,EAAA,KAAA,CAAA,CAAA,MAAAsB,CAAA,IAAAA,IAAAJ,GAEA,CAAA,kBAAAK,EAAA,gBAAAC,CAAA,EAAAC,EAA+CP,EAC7CT,EACAD,GAAAH,CACS,EAGX,OAAAqB,EAAA,KACEC,EAAC,CAAA,OAAA,IAAAX,EAAA,EAAA,EAC8B,QAAAD,EACpB,UAAAa,EAAA,GAAAC,EAAA,aAAAnB,GAAA,EACmD,WAAA,GAClD,SAAA,CAEVgB,EAAA,KAAAI,EAAA,UAAA,CAAA,UAAAlB,GAAA,YAAAA,EAAA,UAAA,SAAA,CACGJ,EAAAuB,EAAA,IACCD,EAAC,CAAA,QAAAtB,EACU,MAAAwB,EAAApB,GAAA,YAAAA,EAAA,UAAAD,GAAA,YAAAA,EAAA,IAAA,EACmD,SAAAC,GAAA,YAAAA,EAAA,SACtC,WAAAA,GAAA,YAAAA,EAAA,WACE,SAAAJ,CAEvB,CAAA,EAAA,KAEDkB,EAAA,KACJO,EAAA,KAAO,CAAN,kBAAAV,EACC,KAAAZ,GAAA,YAAAA,EAAA,KACkB,aAAAA,GAAA,YAAAA,EAAA,aACQ,MAAAA,GAAA,YAAAA,EAAA,MACP,QAAAuB,GAAA,CAEjBlB,EAAA,CAAAD,CAAA,EACAR,GAAA,MAAAA,EAAA2B,EAAW,EACb,SAAA,CAEAH,EAAA,IAAAE,EAAC,CAAA,GAAA5B,EACC,KAAAG,EACM,KAAA,SACD,IAAAF,EACL,MAAAe,GAAA,YAAAA,EAAA,MACuB,SAAAlB,EACvB,YAAAC,EACA,SAAAO,GAAA,YAAAA,EAAA,SACsB,WAAAA,GAAA,YAAAA,EAAA,UACE,CAAA,EAC1BoB,EAAA,IACAI,EAAC,CAAA,UAAAP,EACY,GAAAC,EAAA,SAAAd,GAAAc,EAAA,cAAA,GACyC,CACpD,CAAA,CACF,CAAA,CAAA,CACF,EAAA,EACFE,EAAA,IACAK,EAAC,CAAA,OAAArB,EACC,QAAAf,EACA,SAAAa,EACA,MAAAK,EACO,MAAAhB,EACP,UAAA2B,EAAA,0BAAA,EAC4C,YAAAf,EAC5C,SAAAQ,GAAA,CAEEH,GAAA,MAAAA,EAAAG,GACAE,GAAA,MAAAA,EAAAF,GACArB,GAAA,MAAAA,EAAAqB,GACAN,EAAA,EAAA,CAAe,CACjB,CAAA,CACF,CAAA,CAAA,CAGN"}