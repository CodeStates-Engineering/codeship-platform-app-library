{"version":3,"file":"index-21c74b4b.js","sources":["../../../src/components/molecules/Selectbox/index.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { ChevronDown } from 'react-feather';\n\nimport styles from './index.module.scss';\nimport { useComponentSelfState, useValidation } from '../../../hooks';\nimport { cleanClassName } from '../../../utils';\nimport { FocusLayer, Options, Input, InputContainer, Label } from '../../atoms';\n\nimport type { Validation } from '../../../hooks';\nimport type {\n  InputProps,\n  InputContainerProps,\n  OptionsProps,\n  Option,\n  InputContainerInteractionProps,\n} from '../../atoms';\n\nexport type SelectboxProps<_Option extends Option = Option> = Omit<\n  InputProps<'button'> & InputContainerProps,\n  | 'type'\n  | 'children'\n  | 'validationMessage'\n  | 'onFocus'\n  | 'value'\n  | 'onChange'\n  | 'name'\n> &\n  Partial<Pick<OptionsProps<_Option>, 'options' | 'float'>> &\n  InputContainerInteractionProps & {\n    onlyUpdatedByParent?: boolean;\n    onChange?: OptionsProps<_Option>['onSelect'];\n    value?: Exclude<OptionsProps<_Option>['value'], undefined>['value'];\n    label?: string;\n    validation?: Validation<SelectboxProps<_Option>['value']>;\n    validationSpace?: boolean;\n    className?: string;\n  };\n\nexport const Selectbox = <_Option extends Option = Option>({\n  value,\n  options,\n  onChange,\n  float,\n  onlyUpdatedByParent,\n  disabled,\n  placeholder,\n  size,\n  id,\n  ref,\n  onClick,\n  label,\n  validation,\n  validationSpace,\n  className,\n}: SelectboxProps<_Option>) => {\n  const [opened, setOpened] = useState(false);\n\n  const [selectedValue, setSelectedValue] = useComponentSelfState(\n    value,\n    onlyUpdatedByParent,\n  );\n\n  const selectedOption = options?.find(({ value }) => value === selectedValue);\n\n  const { validationMessage, checkValidation } = useValidation(\n    value,\n    validation,\n    label || id,\n  );\n\n  return (\n    <FocusLayer\n      onClick={() => setOpened(false)}\n      focused={opened}\n      className={cleanClassName(`${styles.selectbox} ${className}`)}\n      bodyScroll\n    >\n      {label ? <Label htmlFor={label}>{label}</Label> : null}\n      <InputContainer\n        validationMessage={validationMessage}\n        validationSpace={validationSpace}\n      >\n        <InputContainer.Interaction\n          size={size}\n          onClick={(e) => {\n            setOpened(!opened);\n            onClick?.(e);\n          }}\n        >\n          <Input\n            id={id}\n            name={label}\n            type=\"button\"\n            ref={ref}\n            value={selectedOption?.label}\n            disabled={disabled}\n            placeholder={placeholder}\n          />\n          <ChevronDown\n            className={cleanClassName(\n              `${styles.arrow} ${opened && styles['opened-arrow']}`,\n            )}\n          />\n        </InputContainer.Interaction>\n        <Options\n          opened={opened}\n          options={options}\n          value={selectedOption}\n          float={float}\n          className={styles['select-box-default-width']}\n          onSelect={(option) => {\n            const optionForSelect =\n              option === selectedOption ? undefined : option;\n            const value = optionForSelect?.value;\n            setSelectedValue?.(value);\n            checkValidation?.(value);\n            onChange?.(optionForSelect);\n            setOpened(false);\n          }}\n        />\n      </InputContainer>\n    </FocusLayer>\n  );\n};\n"],"names":["Selectbox","value","options","onChange","float","onlyUpdatedByParent","disabled","placeholder","size","id","ref","onClick","label","validation","validationSpace","className","opened","setOpened","useState","selectedValue","setSelectedValue","useComponentSelfState","selectedOption","value2","validationMessage","checkValidation","useValidation","jsxs","FocusLayer","cleanClassName","styles","jsx","Label","InputContainer","e","Input","ChevronDown","Options","option","optionForSelect"],"mappings":"iiBAsCOA,EAAA,CAAA,CAAoD,MAAAC,EACzD,QAAAC,EACA,SAAAC,EACA,MAAAC,EACA,oBAAAC,EACA,SAAAC,EACA,YAAAC,EACA,KAAAC,EACA,GAAAC,EACA,IAAAC,EACA,QAAAC,EACA,MAAAC,EACA,WAAAC,EACA,gBAAAC,EACA,UAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,CAAAC,EAAAC,CAAA,EAAAC,EAA0CpB,EACxCI,CACA,EAGFiB,EAAApB,GAAA,YAAAA,EAAA,KAAA,CAAA,CAAA,MAAAqB,CAAA,IAAAA,IAAAJ,GAEA,CAAA,kBAAAK,EAAA,gBAAAC,CAAA,EAAAC,EAA+CzB,EAC7CY,EACAD,GAAAH,CACS,EAGX,OAAAkB,EAAA,KACEC,EAAC,CAAA,QAAA,IAAAX,EAAA,EAAA,EAC+B,QAAAD,EACrB,UAAAa,EAAA,GAAAC,EAAA,aAAAf,GAAA,EACmD,WAAA,GAClD,SAAA,CAETH,EAAAmB,EAAAA,IAAAC,EAAA,CAAA,QAAApB,EAAA,SAAAA,CAAA,CAAA,EAAA,KAAiDe,EAAA,KAClDM,EAAC,CAAA,kBAAAT,EACC,gBAAAV,EACA,SAAA,CAEAa,EAAA,KAAAM,EAAA,YAAgB,CAAf,KAAAzB,EACC,QAAA0B,GAAA,CAEEjB,EAAA,CAAAD,CAAA,EACAL,GAAA,MAAAA,EAAAuB,EAAW,EACb,SAAA,CAEAH,EAAA,IAAAI,EAAC,CAAA,GAAA1B,EACC,KAAAG,EACM,KAAA,SACD,IAAAF,EACL,MAAAY,GAAA,YAAAA,EAAA,MACuB,SAAAhB,EACvB,YAAAC,CACA,CAAA,EACFwB,EAAA,IACAK,EAAC,CAAA,UAAAP,EACY,GAAAC,EAAA,SAAAd,GAAAc,EAAA,cAAA,GACyC,CACpD,CAAA,CACF,CAAA,CAAA,EACFC,EAAA,IACAM,EAAC,CAAA,OAAArB,EACC,QAAAd,EACA,MAAAoB,EACO,MAAAlB,EACP,UAAA0B,EAAA,0BAAA,EAC4C,SAAAQ,GAAA,CAE1C,MAAAC,EAAAD,IAAAhB,EAAA,OAAAgB,EAEAf,EAAAgB,GAAA,YAAAA,EAAA,MACAnB,GAAA,MAAAA,EAAAG,GACAE,GAAA,MAAAA,EAAAF,GACApB,GAAA,MAAAA,EAAAoC,GACAtB,EAAA,EAAA,CAAe,CACjB,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAGN"}