{"version":3,"file":"index-64131664.js","sources":["../../../src/utils/cleanClassName.ts","../../../src/utils/createValidationStore.tsx"],"sourcesContent":["export function cleanClassName(className: string | undefined | null | false) {\n  if (className) {\n    return className\n      .replace(/(undefined)|(false)|\\n/g, '')\n      .replace(/ +(?= )/g, '')\n      .replace(/^ */g, '')\n      .replace(/ *$/g, '');\n  }\n}\n","import { createContext } from 'react';\n\ntype ValidationStoreData = Map<string, () => string | undefined>;\n\nexport const ValidationContext = createContext<ValidationStoreData | null>(\n  null,\n);\n\nexport const createValidationStore = () => {\n  const data: ValidationStoreData = new Map();\n  return {\n    data,\n    provideValidationStore: (children: React.ReactNode) => (\n      <ValidationContext.Provider value={data}>\n        {children}\n      </ValidationContext.Provider>\n    ),\n    validateAll: () => {\n      const result = {\n        isValid: true,\n        invalidKeys: [] as string[],\n      };\n      data.forEach((validation, key) => {\n        if (validation()) {\n          result.isValid = false;\n          result.invalidKeys.push(key);\n        }\n      });\n      return result;\n    },\n  };\n};\n\nexport type ValidationStore = ReturnType<typeof createValidationStore>;\n"],"names":["cleanClassName","className","ValidationContext","createContext"],"mappings":"0EAAO,SAASA,EAAeC,EAA8C,CAC3E,GAAIA,EACF,OAAOA,EACJ,QAAQ,0BAA2B,EAAE,EACrC,QAAQ,WAAY,EAAE,EACtB,QAAQ,OAAQ,EAAE,EAClB,QAAQ,OAAQ,EAAE,CAEzB,CCJO,MAAMC,EAAoBC,EAAA,cAC/B,IACF"}