{"version":3,"file":"index-0229dc09.js","sources":["../../../src/components/molecules/Textarea/index.tsx"],"sourcesContent":["import type { DetailedHTMLProps, TextareaHTMLAttributes } from 'react';\n\nimport styles from './index.module.scss';\nimport { useComponentSelfState, useValidation } from '../../../hooks';\nimport { cleanClassName } from '../../../utils';\nimport { InputContainer, Label } from '../../atoms';\n\nimport type { Validation } from '../../../hooks';\nimport type { InputContainerProps } from '../../atoms';\n\nexport type TextareaProps = Partial<\n  Omit<\n    InputContainerProps,\n    'size' | 'onClick' | 'children' | 'validationMessage'\n  > &\n    Pick<\n      DetailedHTMLProps<\n        TextareaHTMLAttributes<HTMLTextAreaElement>,\n        HTMLTextAreaElement\n      >,\n      'placeholder' | 'id'\n    >\n> & {\n  resize?: boolean;\n  onlyUpdatedByParent?: boolean;\n  onChange?: (value?: string) => void;\n  value?: string;\n  validation?: Validation<TextareaProps['value']>;\n  label?: string;\n  validationSpace?: boolean;\n  className?: string;\n  disabled?: boolean | 'read-only';\n  height?: React.CSSProperties['height'];\n};\n\nexport const Textarea = ({\n  placeholder = '',\n  value: originalValue,\n  resize = true,\n  onlyUpdatedByParent,\n  onChange,\n  disabled,\n  validation,\n  id,\n  label,\n  validationSpace,\n  className,\n  height,\n}: TextareaProps) => {\n  const [textareaValue, setTextareaValue] = useComponentSelfState(\n    originalValue ?? '',\n    onlyUpdatedByParent,\n  );\n\n  const { validationMessage, checkValidation } = useValidation(\n    textareaValue,\n    validation,\n    label,\n  );\n\n  return (\n    <div className={cleanClassName(`${styles} ${className}`)}>\n      {label ? <Label htmlFor={label}>{label}</Label> : null}\n      <InputContainer\n        validationMessage={validationMessage}\n        validationSpace={validationSpace}\n      >\n        <InputContainer.Interaction size=\"none\">\n          <textarea\n            id={id}\n            name={label}\n            value={textareaValue}\n            placeholder={placeholder}\n            style={{ height }}\n            onChange={({ target: { value } }) => {\n              setTextareaValue?.(value);\n              onChange?.(value);\n              checkValidation?.(value);\n            }}\n            disabled={!!disabled}\n            className={cleanClassName(\n              `${styles['textarea-content']} ${resize && styles.resize} ${\n                disabled === 'read-only' && [styles['read-only']]\n              } ${styles['full-size']}`,\n            )}\n          />\n        </InputContainer.Interaction>\n      </InputContainer>\n    </div>\n  );\n};\n"],"names":["Textarea","placeholder","originalValue","resize","onlyUpdatedByParent","onChange","disabled","validation","id","label","validationSpace","className","height","textareaValue","setTextareaValue","useComponentSelfState","validationMessage","checkValidation","useValidation","jsxs","cleanClassName","styles","jsx","Label","InputContainer","value"],"mappings":"qnCAmCOA,EAAA,CAAA,CAAkB,YAAAC,EAAA,GACT,MAAAC,EACP,OAAAC,EAAA,GACE,oBAAAC,EACT,SAAAC,EACA,SAAAC,EACA,WAAAC,EACA,GAAAC,EACA,MAAAC,EACA,gBAAAC,EACA,UAAAC,EACA,OAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAA0Cb,GAAA,GACvBE,CACjB,EAGF,CAAA,kBAAAY,EAAA,gBAAAC,CAAA,EAAAC,EAA+CL,EAC7CN,EACAE,CACA,EAGF,OAAAU,OAAA,MAAA,CAAA,UAAAC,EAAA,GAAAC,KAAAV,GAAA,EAAA,SAAA,CAEKF,EAAAa,EAAAA,IAAAC,EAAA,CAAA,QAAAd,EAAA,SAAAA,CAAA,CAAA,EAAA,KAAiDa,EAAA,IAClDE,EAAC,CAAA,kBAAAR,EACC,gBAAAN,EACA,SAAAY,EAAA,IAAAE,EAAA,YAAA,CAAA,KAAA,OAAA,SAAAF,EAAA,IAGE,WAAC,CAAA,GAAAd,EACC,KAAAC,EACM,MAAAI,EACC,YAAAZ,EACP,MAAA,CAAA,OAAAW,CAAA,EACgB,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAa,CAAA,CAAA,IAAA,CAEdX,GAAA,MAAAA,EAAAW,GACApB,GAAA,MAAAA,EAAAoB,GACAR,GAAA,MAAAA,EAAAQ,EAAuB,EACzB,SAAA,CAAA,CAAAnB,EACY,UAAAc,EACD,GAAAC,EAAA,kBAAA,KAAAlB,GAAAkB,EAAA,UAAAf,IAAA,aAAA,CAAAe,EAAA,WAAA,CAAA,KAAAA,EAAA,WAAA,GAGa,CACxB,CAAA,EAAA,CAEJ,CAAA,CACF,CAAA,CAAA,CAGN"}