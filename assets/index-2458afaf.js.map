{"version":3,"file":"index-2458afaf.js","sources":["../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isNumber.js","../../../node_modules/.pnpm/react-feather@2.0.10_react@18.2.0/node_modules/react-feather/dist/icons/copy.js","../../../src/components/molecules/Table/index.tsx"],"sourcesContent":["import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nexport default isNumber;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Copy = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"rect\", {\n    x: \"9\",\n    y: \"9\",\n    width: \"13\",\n    height: \"13\",\n    rx: \"2\",\n    ry: \"2\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"\n  }));\n});\nCopy.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCopy.displayName = 'Copy';\nexport default Copy;","import { isNumber, debounce } from 'lodash-es';\n\nimport {\n  useRef,\n  useContext,\n  useMemo,\n  useState,\n  useEffect,\n  createContext,\n  Children,\n} from 'react';\nimport type { ReactNode, Dispatch, SetStateAction } from 'react';\nimport { Copy } from 'react-feather';\nimport nodeToString from 'react-node-to-string';\n\nimport styles from './index.module.scss';\nimport { cleanClassName } from '../../../utils';\nimport { Button } from '../../atoms';\n\ntype CSSWidth = React.CSSProperties['width'];\n\ninterface TitleData {\n  order: {\n    origin: number;\n    current: number;\n  };\n  width?: number;\n}\n\ninterface TableState {\n  titles: TitleData[];\n  draggingOrder?: number;\n  dropOrder?: number;\n  hoveredOrder?: number;\n}\n\ninterface TableContextValue {\n  tableState: TableState;\n  setTableState: Dispatch<SetStateAction<TableState>>;\n  fixedTitleCount: number;\n  isLeftScrolled: boolean;\n  isLoading: boolean;\n}\n\nconst TableContext = createContext<TableContextValue>({\n  tableState: {\n    titles: [],\n  },\n  setTableState: () => undefined,\n  fixedTitleCount: 0,\n  isLeftScrolled: false,\n  isLoading: false,\n});\n\ninterface CommonProps {\n  className?: string;\n  children?: ReactNode;\n}\n\nexport interface TableProps extends CommonProps {\n  fixedTitleCount?: number;\n}\n\nconst TableMain = ({\n  className,\n  children,\n  fixedTitleCount = 0,\n}: TableProps) => {\n  const [tableState, setTableState] = useState<TableState>({\n    titles: [],\n  });\n  const [isLeftScrolled, setIsLeftScrolled] = useState(false);\n\n  useEffect(() => {\n    const debouncedResizeEvent = debounce(() => {\n      setTableState((prevState) => {\n        prevState.titles.forEach((title) => {\n          title.width = undefined;\n        });\n\n        return {\n          ...prevState,\n        };\n      });\n    }, 300);\n\n    window.addEventListener('resize', debouncedResizeEvent);\n    return () => window.removeEventListener('resize', debouncedResizeEvent);\n  }, []);\n\n  const tableContextValue: TableContextValue = useMemo(() => {\n    const isLoading = !tableState.titles.find(({ width }) => !!width);\n\n    return {\n      tableState,\n      setTableState,\n      fixedTitleCount,\n      isLeftScrolled,\n      isLoading,\n    };\n  }, [fixedTitleCount, tableState, isLeftScrolled]);\n\n  return (\n    <article\n      className={cleanClassName(`${styles.table} ${className}`)}\n      onScroll={(e) => setIsLeftScrolled(e.currentTarget.scrollLeft > 0)}\n    >\n      <table>\n        <TableContext.Provider value={tableContextValue}>\n          {children}\n        </TableContext.Provider>\n      </table>\n    </article>\n  );\n};\n\nexport type TableHeaderProps = CommonProps;\n\nconst TableHeader = ({ children, className }: TableHeaderProps) => {\n  const titleCount = Children.count(children);\n  const {\n    setTableState,\n    tableState: { titles },\n  } = useContext(TableContext);\n  useEffect(() => {\n    setTableState((prevState) => ({\n      ...prevState,\n      titles: Array.from(\n        {\n          length: titleCount,\n        },\n        (_, index) => ({\n          order: {\n            origin: index,\n            current: index,\n          },\n        }),\n      ),\n    }));\n  }, [titleCount, setTableState]);\n\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <thead className={cleanClassName(`${styles.header} ${className}`)}>\n      <tr>{titles.map(({ order: { origin } }) => childrenArray[origin])}</tr>\n    </thead>\n  );\n};\n\nexport interface TableTitleProps extends CommonProps {\n  width?: CSSWidth;\n}\n\nconst TableTitle = ({ children, width, className }: TableTitleProps) => {\n  const {\n    tableState,\n    setTableState,\n    fixedTitleCount,\n    isLeftScrolled,\n    isLoading,\n  } = useContext(TableContext);\n\n  const { titles } = tableState;\n\n  const ref = useRef<HTMLTableCellElement>(null);\n\n  useEffect(() => {\n    const { current: element } = ref;\n    if (element) {\n      const { offsetWidth, cellIndex } = element;\n      if (width || !isLoading) {\n        setTableState((prevState) => {\n          prevState.titles[cellIndex].width = offsetWidth;\n          return { ...prevState };\n        });\n      }\n    }\n  }, [ref, setTableState, width, isLoading]);\n\n  const currentOrder = ref.current?.cellIndex ?? -1;\n\n  const { draggingOrder, hoveredOrder, dropOrder } = tableState;\n\n  const setHoveredOrder = (hoveredOrder?: number) => {\n    if (draggingOrder === undefined) {\n      setTableState((prevState) => ({\n        ...prevState,\n        hoveredOrder,\n      }));\n    }\n  };\n\n  const handleDrop = () => {\n    if (isNumber(draggingOrder) && currentOrder >= 0) {\n      let sortedTitles = [...titles];\n\n      const [draggingTitle] = sortedTitles.splice(draggingOrder, 1);\n\n      sortedTitles = sortedTitles.sort(\n        (a, b) => a.order.current - b.order.current,\n      );\n\n      const { order } = titles[currentOrder];\n\n      sortedTitles = [\n        ...sortedTitles.slice(0, order.current),\n        draggingTitle,\n        ...sortedTitles.slice(order.current),\n      ];\n\n      sortedTitles.forEach((title, newOrder) => {\n        title.order.current = newOrder;\n      });\n\n      const newTableState = {\n        ...tableState,\n        titles: sortedTitles,\n        dropOrder: undefined,\n        draggingOrder: undefined,\n        hoveredOrder: undefined,\n      };\n\n      setTableState(newTableState);\n\n      setTimeout(() =>\n        setTableState({\n          ...newTableState,\n          hoveredOrder: currentOrder,\n        }),\n      );\n    }\n  };\n\n  let left = 0;\n  for (let i = 0; i < currentOrder; i += 1) {\n    left += titles[i]?.width ?? 0;\n  }\n\n  const isDropTarget = dropOrder === currentOrder;\n  const isDragging = draggingOrder === currentOrder;\n  const isFixed = currentOrder < fixedTitleCount;\n  const isLastFixed = currentOrder === fixedTitleCount - 1;\n  const isHovered = hoveredOrder === currentOrder;\n  return (\n    <th\n      style={{\n        left,\n      }}\n      className={cleanClassName(\n        `${styles.title} ${isFixed && styles.fixed} ${\n          isLastFixed && isLeftScrolled && styles.shadow\n        } ${isHovered && styles.hovered} ${\n          isDropTarget &&\n          (isDragging ||\n            ((draggingOrder ?? 0) > dropOrder\n              ? styles['drop-left']\n              : styles['drop-right']))\n        } ${isDragging && (isDropTarget ? styles.restoring : styles.dragging)} \n\n        } ${\n          isDragging && (isDropTarget ? styles.restoring : styles.dragging)\n        } ${className}`,\n      )}\n      ref={ref}\n      draggable\n      onMouseEnter={() => setHoveredOrder(currentOrder)}\n      onMouseLeave={() => setHoveredOrder()}\n      onDragOver={(e) => e.preventDefault()}\n      onDragStart={() =>\n        setTableState((prevState) => ({\n          ...prevState,\n          draggingOrder: currentOrder,\n        }))\n      }\n      onDragEnter={() =>\n        setTableState((prevState) => ({\n          ...prevState,\n          dropOrder: currentOrder,\n        }))\n      }\n      onDrop={handleDrop}\n    >\n      <div\n        style={{\n          width,\n        }}\n        className={styles['title-content']}\n      >\n        {children}\n      </div>\n    </th>\n  );\n};\n\nexport type TableBodyProps = CommonProps;\n\nconst TableBody = ({ children, className }: TableBodyProps) => (\n  <tbody className={className}>{children}</tbody>\n);\n\nexport type TableRowProps = CommonProps;\n\nconst TableRow = ({ children, className }: TableRowProps) => {\n  const {\n    tableState: { titles },\n  } = useContext(TableContext);\n\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <tr className={cleanClassName(`${styles.row} ${className}`)}>\n      {titles.map(({ order: { origin } }) => childrenArray[origin])}\n    </tr>\n  );\n};\n\nexport interface TableCellProps extends CommonProps {\n  onCopy?: (value: string) => void;\n  hoverStyle?: Pick<React.CSSProperties, 'maxHeight' | 'maxWidth'>;\n}\n\nconst TableCell = ({\n  children,\n  onCopy,\n  className,\n  hoverStyle,\n}: TableCellProps) => {\n  const {\n    tableState: { titles, hoveredOrder, draggingOrder, dropOrder },\n    fixedTitleCount,\n    isLeftScrolled,\n    setTableState,\n    isLoading,\n  } = useContext(TableContext);\n\n  const ref = useRef<HTMLTableCellElement>(null);\n  const currentOrder = ref.current?.cellIndex ?? -1;\n\n  const { width } = titles[currentOrder ?? 0] ?? {};\n  let left = 0;\n  for (let i = 0; i < currentOrder; i += 1) {\n    left += titles[i]?.width ?? 0;\n  }\n\n  const [isHovered, setIsHovered] = useState(false);\n\n  const isDropTarget = dropOrder === currentOrder;\n  const isDragging = draggingOrder === currentOrder;\n  const isFixed = currentOrder < fixedTitleCount;\n  const isLastFixed = currentOrder === fixedTitleCount - 1;\n  const isTitleHovered = hoveredOrder === currentOrder;\n\n  useEffect(\n    () => setTableState((tableState) => ({ ...tableState })),\n    [children, setTableState],\n  );\n\n  const [isOverflow, setOverflow] = useState(true);\n\n  return (\n    <td\n      ref={ref}\n      style={{\n        left,\n      }}\n      className={cleanClassName(\n        `${styles.cell} ${isFixed && styles.fixed} ${\n          isLastFixed && isLeftScrolled && styles.shadow\n        } ${isTitleHovered && styles.hovered} ${\n          isDropTarget &&\n          (isDragging ||\n            ((draggingOrder ?? 0) > dropOrder\n              ? styles['drop-left']\n              : styles['drop-right']))\n        } ${\n          isDragging && (isDropTarget ? styles.restoring : styles.dragging)\n        } ${className}`,\n      )}\n    >\n      {isLoading ? null : (\n        <div\n          style={{\n            width,\n          }}\n          className={`${styles['cell-content-container']} ${\n            isOverflow ? styles.overflow : styles['not-overflow']\n          }`}\n          onMouseEnter={({ currentTarget }) => {\n            const isOverflow =\n              currentTarget.scrollWidth > currentTarget.clientWidth;\n\n            if (isOverflow || onCopy) {\n              setIsHovered(true);\n            }\n\n            if (!isOverflow) {\n              setOverflow(false);\n            }\n          }}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          {isHovered ? (\n            <div className={styles.hidden}>{children}</div>\n          ) : (\n            children\n          )}\n          {isHovered ? (\n            <div\n              className={cleanClassName(\n                `${styles['hovered-cell-content-wrap']} ${\n                  hoverStyle && styles['has-style']\n                }`,\n              )}\n              style={hoverStyle}\n            >\n              <div className={styles['hovered-cell-content']}>{children}</div>\n              {onCopy ? (\n                <div className={styles['copy-button-wrap']}>\n                  <Button\n                    size=\"small3x\"\n                    shape=\"round\"\n                    theme=\"bluish-gray700/0\"\n                    icon={<Copy size={14} />}\n                    onClick={() => {\n                      const childrenString = nodeToString(children);\n                      navigator.clipboard.writeText(childrenString);\n                      onCopy?.(childrenString);\n                    }}\n                  />\n                </div>\n              ) : null}\n            </div>\n          ) : null}\n        </div>\n      )}\n    </td>\n  );\n};\n\nexport const Table = Object.assign(TableMain, {\n  Header: TableHeader,\n  Title: TableTitle,\n  Body: TableBody,\n  Row: TableRow,\n  Cell: TableCell,\n});\n"],"names":["numberTag","isNumber","value","isObjectLike","baseGetTag","_extends","target","i","source","key","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","sourceKeys","Copy","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","PropTypes","Copy$1","TableContext","createContext","TableMain","className","children","fixedTitleCount","tableState","setTableState","useState","isLeftScrolled","setIsLeftScrolled","useEffect","debouncedResizeEvent","debounce","prevState","title","tableContextValue","useMemo","isLoading","width","jsx","cleanClassName","styles","e","TableHeader","titleCount","Children","titles","useContext","_","index","childrenArray","origin","TableTitle","useRef","element","offsetWidth","cellIndex","currentOrder","_a","draggingOrder","hoveredOrder","dropOrder","setHoveredOrder","hoveredOrder2","handleDrop","sortedTitles","draggingTitle","a","b","order","newOrder","newTableState","left","_b","isDropTarget","isDragging","isFixed","isLastFixed","isHovered","TableBody","TableRow","TableCell","onCopy","hoverStyle","setIsHovered","isTitleHovered","isOverflow","setOverflow","jsxs","currentTarget","isOverflow2","Button","childrenString","nodeToString","Table"],"mappings":"mXAIA,IAAIA,EAAY,kBA4BhB,SAASC,EAASC,EAAO,CACvB,OAAO,OAAOA,GAAS,UACpBC,EAAaD,CAAK,GAAKE,EAAWF,CAAK,GAAKF,CACjD,CCnCA,SAASK,GAAW,CAAE,OAAAA,EAAW,OAAO,QAAU,SAAUC,EAAQ,CAAE,QAASC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAAK,CAAE,IAAIC,EAAS,UAAUD,CAAC,EAAG,QAASE,KAAOD,EAAc,OAAO,UAAU,eAAe,KAAKA,EAAQC,CAAG,IAAKH,EAAOG,CAAG,EAAID,EAAOC,CAAG,GAAS,OAAOH,GAAkBD,EAAS,MAAM,KAAM,SAAS,CAAI,CAE7T,SAASK,EAAyBF,EAAQG,EAAU,CAAE,GAAIH,GAAU,KAAM,MAAO,GAAI,IAAIF,EAASM,EAA8BJ,EAAQG,CAAQ,EAAOF,EAAKF,EAAG,GAAI,OAAO,sBAAuB,CAAE,IAAIM,EAAmB,OAAO,sBAAsBL,CAAM,EAAG,IAAKD,EAAI,EAAGA,EAAIM,EAAiB,OAAQN,IAAOE,EAAMI,EAAiBN,CAAC,EAAO,EAAAI,EAAS,QAAQF,CAAG,GAAK,IAAkB,OAAO,UAAU,qBAAqB,KAAKD,EAAQC,CAAG,IAAaH,EAAOG,CAAG,EAAID,EAAOC,CAAG,GAAO,OAAOH,CAAS,CAE5e,SAASM,EAA8BJ,EAAQG,EAAU,CAAE,GAAIH,GAAU,KAAM,MAAO,CAAE,EAAE,IAAIF,EAAS,CAAE,EAAMQ,EAAa,OAAO,KAAKN,CAAM,EAAOC,EAAKF,EAAG,IAAKA,EAAI,EAAGA,EAAIO,EAAW,OAAQP,IAAOE,EAAMK,EAAWP,CAAC,EAAO,EAAAI,EAAS,QAAQF,CAAG,GAAK,KAAaH,EAAOG,CAAG,EAAID,EAAOC,CAAG,GAAK,OAAOH,CAAS,CAInT,IAAIS,EAAOC,EAAU,WAAC,SAAUC,EAAMC,EAAK,CACzC,IAAIC,EAAaF,EAAK,MAClBG,EAAQD,IAAe,OAAS,eAAiBA,EACjDE,EAAYJ,EAAK,KACjBK,EAAOD,IAAc,OAAS,GAAKA,EACnCE,EAAOb,EAAyBO,EAAM,CAAC,QAAS,MAAM,CAAC,EAE3D,OAAoBO,EAAM,cAAc,MAAOnB,EAAS,CACtD,IAAKa,EACL,MAAO,6BACP,MAAOI,EACP,OAAQA,EACR,QAAS,YACT,KAAM,OACN,OAAQF,EACR,YAAa,IACb,cAAe,QACf,eAAgB,OACjB,EAAEG,CAAI,EAAgBC,EAAM,cAAc,OAAQ,CACjD,EAAG,IACH,EAAG,IACH,MAAO,KACP,OAAQ,KACR,GAAI,IACJ,GAAI,GACR,CAAG,EAAgBA,EAAM,cAAc,OAAQ,CAC3C,EAAG,yDACJ,CAAA,CAAC,CACJ,CAAC,EACDT,EAAK,UAAY,CACf,MAAOU,EAAU,OACjB,KAAMA,EAAU,UAAU,CAACA,EAAU,OAAQA,EAAU,MAAM,CAAC,CAChE,EACAV,EAAK,YAAc,OACnB,MAAAW,EAAeX,ijDCEfY,EAAAC,EAAAA,cAAA,CAAsD,WAAA,CACxC,OAAA,CAAA,CACD,EACX,cAAA,IAAA,GACqB,gBAAA,EACJ,eAAA,GACD,UAAA,EAElB,CAAA,EAWAC,GAAA,CAAA,CAAmB,UAAAC,EACjB,SAAAC,EACA,gBAAAC,EAAA,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,WAAA,CAAyD,OAAA,CAAA,CAC9C,CAAA,EAEX,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EAEAG,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAAC,EAAA,IAAA,CACEN,EAAAO,IACEA,EAAA,OAAA,QAAAC,GAAA,CACEA,EAAA,MAAA,MAAc,CAAA,EAGhB,CAAO,GAAAD,CACF,EACL,CACD,EAAA,GAAA,EAGH,cAAA,iBAAA,SAAAF,CAAA,EACA,IAAA,OAAA,oBAAA,SAAAA,CAAA,CAAsE,EAAA,CAAA,CAAA,EAGxE,MAAAI,EAAAC,EAAAA,QAAA,IAAA,CACE,MAAAC,EAAA,CAAAZ,EAAA,OAAA,KAAA,CAAA,CAAA,MAAAa,CAAA,IAAA,CAAA,CAAAA,CAAA,EAEA,MAAA,CAAO,WAAAb,EACL,cAAAC,EACA,gBAAAF,EACA,eAAAI,EACA,UAAAS,CACA,CACF,EAAA,CAAAb,EAAAC,EAAAG,CAAA,CAAA,EAGF,OAAAW,EAAA,IACE,UAAC,CAAA,UAAAC,EAAA,GAAAC,EAAA,SAAAnB,GAAA,EACyD,SAAAoB,GAAAb,EAAAa,EAAA,cAAA,WAAA,CAAA,EACS,SAAAH,EAAAA,IAAA,QAAA,CAAA,SAAAA,EAAAA,IAAApB,EAAA,SAAA,CAAA,MAAAgB,EAAA,SAAAZ,CAAA,CAAA,CAAA,CAAA,CAMjE,CAAA,CAGN,EAIAoB,GAAA,CAAA,CAAA,SAAApB,EAAA,UAAAD,KAAA,CACE,MAAAsB,EAAAC,EAAAA,SAAA,MAAAtB,CAAA,EACA,CAAM,cAAAG,EACJ,WAAA,CAAA,OAAAoB,CAAA,CACqB,EAAAC,EAAAA,WAAA5B,CAAA,EAEvBW,EAAAA,UAAA,IAAA,CACEJ,EAAAO,IAAA,CAA8B,GAAAA,EACzB,OAAA,MAAA,KACW,CACZ,OAAAW,CACU,EACV,CAAAI,EAAAC,KAAA,CACe,MAAA,CACN,OAAAA,EACG,QAAAA,CACC,CACX,EACF,CACF,EAAA,CACA,EAAA,CAAAL,EAAAlB,CAAA,CAAA,EAGJ,MAAAwB,EAAAL,EAAAA,SAAA,QAAAtB,CAAA,EAEA,OAAAgB,EAAA,IAAA,QAAA,CAAA,UAAAC,EAAA,GAAAC,EAAA,UAAAnB,GAAA,EAAA,SAAAiB,EAAA,IAAA,KAAA,CAAA,SAAAO,EAAA,IAAA,CAAA,CAAA,MAAA,CAAA,OAAAK,CAAA,CAAA,IAAAD,EAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAKF,EAMAC,GAAA,CAAA,CAAA,SAAA7B,EAAA,MAAAe,EAAA,UAAAhB,CAAA,IAAA,SACE,KAAA,CAAM,WAAAG,EACJ,cAAAC,EACA,gBAAAF,EACA,eAAAI,EACA,UAAAS,CACA,EAAAU,EAAAA,WAAA5B,CAAA,EAGF,CAAA,OAAA2B,CAAA,EAAArB,EAEAf,EAAA2C,SAAA,IAAA,EAEAvB,EAAAA,UAAA,IAAA,CACE,KAAA,CAAA,QAAAwB,CAAA,EAAA5C,EACA,GAAA4C,EAAA,CACE,KAAA,CAAA,YAAAC,EAAA,UAAAC,CAAA,EAAAF,GACAhB,GAAA,CAAAD,IACEX,EAAAO,IACEA,EAAA,OAAAuB,CAAA,EAAA,MAAAD,EACA,CAAA,GAAAtB,GAAsB,EAG5B,EAAA,CAAAvB,EAAAgB,EAAAY,EAAAD,CAAA,CAAA,EAGF,MAAAoB,IAAAC,EAAAhD,EAAA,UAAA,YAAAgD,EAAA,YAAA,GAEA,CAAA,cAAAC,EAAA,aAAAC,EAAA,UAAAC,CAAA,EAAApC,EAEAqC,EAAAC,GAAA,CACEJ,IAAA,QACEjC,EAAAO,IAAA,CAA8B,GAAAA,EACzB,aAAA8B,CACH,EAAA,CAEJ,EAGFC,EAAA,IAAA,CACE,GAAAvE,EAAAkE,CAAA,GAAAF,GAAA,EAAA,CACE,IAAAQ,EAAA,CAAA,GAAAnB,CAAA,EAEA,KAAA,CAAAoB,CAAA,EAAAD,EAAA,OAAAN,EAAA,CAAA,EAEAM,EAAAA,EAAA,KAA4B,CAAAE,EAAAC,IAAAD,EAAA,MAAA,QAAAC,EAAA,MAAA,OACU,EAGtC,KAAA,CAAA,MAAAC,CAAA,EAAAvB,EAAAW,CAAA,EAEAQ,EAAA,CAAe,GAAAA,EAAA,MAAA,EAAAI,EAAA,OAAA,EACyBH,EACtC,GAAAD,EAAA,MAAAI,EAAA,OAAA,CACmC,EAGrCJ,EAAA,QAAA,CAAA/B,EAAAoC,IAAA,CACEpC,EAAA,MAAA,QAAAoC,CAAsB,CAAA,EAGxB,MAAAC,EAAA,CAAsB,GAAA9C,EACjB,OAAAwC,EACK,UAAA,OACG,cAAA,OACI,aAAA,MACD,EAGhBvC,EAAA6C,CAAA,EAEA,WAAA,IAAA7C,EAAA,CACgB,GAAA6C,EACT,aAAAd,CACW,CAAA,CACf,EAEL,EAGF,IAAAe,EAAA,EACA,QAAAzE,EAAA,EAAAA,EAAA0D,EAAA1D,GAAA,EACEyE,KAAAC,EAAA3B,EAAA/C,CAAA,IAAA,YAAA0E,EAAA,QAAA,EAGF,MAAAC,EAAAb,IAAAJ,EACAkB,EAAAhB,IAAAF,EACAmB,EAAAnB,EAAAjC,EACAqD,EAAApB,IAAAjC,EAAA,EACAsD,EAAAlB,IAAAH,EACA,OAAAlB,EAAA,IACE,KAAC,CAAA,MAAA,CACQ,KAAAiC,CACL,EACF,UAAAhC,EACW,GAAAC,EAAA,SAAAmC,GAAAnC,EAAA,SAAAoC,GAAAjD,GAAAa,EAAA,UAAAqC,GAAArC,EAAA,WAAAiC,IAAAC,KAAAhB,GAAA,GAAAE,EAAApB,EAAA,WAAA,EAAAA,EAAA,YAAA,OAAAkC,IAAAD,EAAAjC,EAAA,UAAAA,EAAA;AAAA;AAAA,YASmDkC,IAAAD,EAAAjC,EAAA,UAAAA,EAAA,aAAAnB,GAIxD,EACN,IAAAZ,EACA,UAAA,GACS,aAAA,IAAAoD,EAAAL,CAAA,EACuC,aAAA,IAAAK,EAAA,EACZ,WAAApB,GAAAA,EAAA,eAAA,EACA,YAAA,IAAAhB,EAAAO,IAAA,CAEJ,GAAAA,EACzB,cAAAwB,CACY,EAAA,EACf,YAAA,IAAA/B,EAAAO,IAAA,CAG4B,GAAAA,EACzB,UAAAwB,CACQ,EAAA,EACX,OAAAO,EAEI,SAAAzB,EAAA,IAER,MAAC,CAAA,MAAA,CACQ,MAAAD,CACL,EACF,UAAAG,EAAA,eAAA,EACiC,SAAAlB,CAEhC,CAAA,CACH,CAAA,CAGN,EAIAwD,GAAA,CAAA,CAAA,SAAAxD,EAAA,UAAAD,CAAA,IAAAiB,MAAA,QAAA,CAAA,UAAAjB,EAAA,SAAAC,CAAA,CAAA,EAMAyD,GAAA,CAAA,CAAA,SAAAzD,EAAA,UAAAD,KAAA,CACE,KAAA,CAAM,WAAA,CAAA,OAAAwB,CAAA,CACiB,EAAAC,EAAAA,WAAA5B,CAAA,EAGvB+B,EAAAL,EAAAA,SAAA,QAAAtB,CAAA,EAEA,OAAAgB,MAAA,KAAA,CAAA,UAAAC,EAAA,GAAAC,EAAA,OAAAnB,GAAA,EAAA,SAAAwB,EAAA,IAAA,CAAA,CAAA,MAAA,CAAA,OAAAK,CAAA,CAAA,IAAAD,EAAAC,CAAA,CAAA,CAAA,CAAA,CAKF,EAOA8B,GAAA,CAAA,CAAmB,SAAA1D,EACjB,OAAA2D,EACA,UAAA5D,EACA,WAAA6D,CAEF,IAAA,SACE,KAAA,CAAM,WAAA,CAAA,OAAArC,EAAA,aAAAc,EAAA,cAAAD,EAAA,UAAAE,CAAA,EACyD,gBAAArC,EAC7D,eAAAI,EACA,cAAAF,EACA,UAAAW,CACA,EAAAU,EAAAA,WAAA5B,CAAA,EAGFT,EAAA2C,SAAA,IAAA,EACAI,IAAAC,EAAAhD,EAAA,UAAA,YAAAgD,EAAA,YAAA,GAEA,CAAA,MAAApB,CAAA,EAAAQ,EAAAW,GAAA,CAAA,GAAA,GACA,IAAAe,EAAA,EACA,QAAAzE,EAAA,EAAAA,EAAA0D,EAAA1D,GAAA,EACEyE,KAAAC,EAAA3B,EAAA/C,CAAA,IAAA,YAAA0E,EAAA,QAAA,EAGF,KAAA,CAAAK,EAAAM,CAAA,EAAAzD,EAAA,SAAA,EAAA,EAEA+C,EAAAb,IAAAJ,EACAkB,EAAAhB,IAAAF,EACAmB,EAAAnB,EAAAjC,EACAqD,EAAApB,IAAAjC,EAAA,EACA6D,EAAAzB,IAAAH,EAEA3B,EAAA,UAAA,IAAAJ,EAAAD,IAAA,CAAA,GAAAA,CAAA,EAAA,EACyD,CAAAF,EAAAG,CAAA,CAC/B,EAG1B,KAAA,CAAA4D,EAAAC,CAAA,EAAA5D,EAAA,SAAA,EAAA,EAEA,OAAAY,EAAA,IACE,KAAC,CAAA,IAAA7B,EACC,MAAA,CACO,KAAA8D,CACL,EACF,UAAAhC,EACW,GAAAC,EAAA,QAAAmC,GAAAnC,EAAA,SAAAoC,GAAAjD,GAAAa,EAAA,UAAA4C,GAAA5C,EAAA,WAAAiC,IAAAC,KAAAhB,GAAA,GAAAE,EAAApB,EAAA,WAAA,EAAAA,EAAA,YAAA,OAAAkC,IAAAD,EAAAjC,EAAA,UAAAA,EAAA,aAAAnB,GAWL,EACN,SAAAe,EAAA,KAAAmD,EAAA,KAGE,MAAC,CAAA,MAAA,CACQ,MAAAlD,CACL,EACF,UAAA,GAAAG,EAAA,wBAAA,KAAA6C,EAAA7C,EAAA,SAAAA,EAAA,cAAA,IAEsD,aAAA,CAAA,CAAA,cAAAgD,KAAA,CAGpD,MAAAC,EAAAD,EAAA,YAAAA,EAAA,aAGAC,GAAAR,IACEE,EAAA,EAAA,EAGFM,GACEH,EAAA,EAAA,CACF,EACF,aAAA,IAAAH,EAAA,EAAA,EACsC,SAAA,CAErCN,EAAAvC,EAAAA,IAAA,MAAA,CAAA,UAAAE,EAAA,OAAA,SAAAlB,CAAA,CAAA,EAAAA,EAGCuD,EAAAU,EAAA,KAGA,MAAC,CAAA,UAAAhD,EACY,GAAAC,EAAA,2BAAA,KAAA0C,GAAA1C,EAAA,WAAA,GAEyB,EAEpC,MAAA0C,EACO,SAAA,CAEP5C,EAAA,IAAA,MAAA,CAAA,UAAAE,EAAA,sBAAA,EAAA,SAAAlB,EAAA,EAA0D2D,EAAA3C,EAAAA,IAAA,MAAA,CAAA,UAAAE,EAAA,kBAAA,EAAA,SAAAF,EAAA,IAGtDoD,EAAC,CAAA,KAAA,UACM,MAAA,QACC,MAAA,mBACA,KAAApD,EAAAA,IAAAhC,EAAA,CAAA,KAAA,EAAA,CAAA,EACgB,QAAA,IAAA,CAEpB,MAAAqF,EAAAC,EAAAtE,CAAA,EACA,UAAA,UAAA,UAAAqE,CAAA,EACAV,GAAA,MAAAA,EAAAU,EAAuB,CACzB,CAAA,CAAA,CAAA,EAAA,IAGF,CAAA,CAAA,EAAA,IAEJ,CAAA,CAAA,CACN,CAAA,CAIR,EAEOE,EAAA,OAAA,OAAAzE,GAAA,CAAuC,OAAAsB,GACpC,MAAAS,GACD,KAAA2B,GACD,IAAAC,GACD,KAAAC,EAEP,CAAA","x_google_ignoreList":[0,1]}